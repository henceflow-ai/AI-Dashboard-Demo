{"file_contents":{"AIRTABLE_SETUP_GUIDE.md":{"content":"# Airtable Setup Guide for AI Sales Dashboard\n\n## Overview\nThis guide will help you set up your Airtable base to work with the AI Sales Dashboard. The dashboard will pull real data from your Airtable tables and display it in the analytics interface.\n\n## Required Tables and Fields\n\n### 1. Leads Table\n**Table Name:** `Leads`\n\n| Field Name | Field Type | Description | Required |\n|------------|------------|-------------|----------|\n| Name | Single line text | Lead's full name | ✓ |\n| Email | Email | Lead's email address | ✓ |\n| Phone | Phone number | Lead's phone number | |\n| Company | Single line text | Lead's company name | |\n| Status | Single select | Lead status (new, contacted, qualified, meeting_booked, closed, lost) | ✓ |\n| Stage | Single select | Pipeline stage (lead, prospect, opportunity, deal) | ✓ |\n| Value | Currency | Potential deal value | |\n| Source | Single select | Lead source (website, referral, cold_outreach, etc.) | |\n| Assigned To | Single line text | Assigned sales rep | |\n| Last Contacted | Date | When lead was last contacted | |\n| Notes | Long text | Additional notes about the lead | |\n| Priority | Single select | Priority level (low, medium, high) | |\n\n**Status Options:**\n- new\n- contacted\n- qualified\n- meeting_booked\n- closed\n- lost\n\n**Stage Options:**\n- lead\n- prospect\n- opportunity\n- deal\n\n### 2. Meetings Table\n**Table Name:** `Meetings`\n\n| Field Name | Field Type | Description | Required |\n|------------|------------|-------------|----------|\n| Lead ID | Single line text | ID linking to lead record | ✓ |\n| Title | Single line text | Meeting title | ✓ |\n| Scheduled At | Date & time | When meeting is scheduled | ✓ |\n| Duration | Number | Meeting duration in minutes | |\n| Status | Single select | Meeting status (scheduled, completed, cancelled, no_show) | ✓ |\n| Type | Single select | Meeting type (discovery, demo, closing, follow_up) | |\n| Notes | Long text | Meeting notes | |\n\n**Status Options:**\n- scheduled\n- completed\n- cancelled\n- no_show\n\n**Type Options:**\n- discovery\n- demo\n- closing\n- follow_up\n\n### 3. Activities Table\n**Table Name:** `Activities`\n\n| Field Name | Field Type | Description | Required |\n|------------|------------|-------------|----------|\n| Lead ID | Single line text | ID linking to lead record | |\n| Type | Single select | Activity type | ✓ |\n| Description | Long text | Activity description | ✓ |\n| Status | Single select | Activity status (completed, pending, failed) | |\n| Created At | Date & time | When activity was created | ✓ |\n\n**Type Options:**\n- lead_added\n- call\n- email\n- meeting\n- deal_closed\n- note\n\n**Status Options:**\n- completed\n- pending\n- failed\n\n### 4. Campaigns Table\n**Table Name:** `Campaigns`\n\n| Field Name | Field Type | Description | Required |\n|------------|------------|-------------|----------|\n| Name | Single line text | Campaign name | ✓ |\n| Type | Single select | Campaign type (email, sms, call, mixed) | ✓ |\n| Status | Single select | Campaign status (active, paused, completed) | ✓ |\n| Target Segment | Single line text | Target audience segment | |\n\n### 5. System Stats Table\n**Table Name:** `System Stats`\n\n| Field Name | Field Type | Description | Required |\n|------------|------------|-------------|----------|\n| Date | Date | Date of the stats | ✓ |\n| Calls Completed | Number | Number of calls completed | |\n| Meetings Scheduled | Number | Number of meetings scheduled | |\n| Emails Sent | Number | Number of emails sent | |\n| Response Rate | Percent | Response rate percentage | |\n| Show Rate | Percent | Meeting show rate percentage | |\n| Conversion Rate | Percent | Lead conversion rate | |\n\n## Setup Steps\n\n### Step 1: Create Your Airtable Base\n1. Go to [Airtable.com](https://airtable.com) and create a new base\n2. Name your base (e.g., \"AI Sales Dashboard\")\n\n### Step 2: Create Tables\n1. Create each of the 5 tables listed above\n2. Add all the required fields with the correct field types\n3. Set up the single select options as specified\n\n### Step 3: Add Sample Data\nAdd some sample data to test the integration:\n\n**Sample Leads:**\n- Sarah Johnson, sarah@techcorp.com, TechCorp Solutions, contacted, prospect, $45,000\n- Mike Chen, mike@startup.com, Startup Inc, new, lead, $12,000\n- Alex Rodriguez, alex@bigcorp.com, Big Corp, meeting_booked, opportunity, $75,000\n\n**Sample Activities:**\n- \"New lead Sarah Johnson added to pipeline\", lead_added, completed\n- \"AI completed call with Mike Chen\", call, completed\n- \"Meeting scheduled with Alex Rodriguez\", meeting, completed\n\n### Step 4: Get Your API Credentials\n1. **API Key:** Go to [Airtable Account](https://airtable.com/account) → Developer hub → Personal access tokens → Create new token\n   - Give it a name like \"AI Dashboard\"\n   - Add scope: `data.records:read` for your base\n   - Copy the token (starts with `pat...`)\n\n2. **Base ID:** Go to your base → Help → API documentation\n   - The Base ID will be shown at the top (starts with `app...`)\n\n### Step 5: Add Credentials to Replit\n1. In your Replit project, go to Secrets (lock icon in sidebar)\n2. Add two secrets:\n   - `AIRTABLE_API_KEY`: Your personal access token\n   - `AIRTABLE_BASE_ID`: Your base ID\n\n### Step 6: Test the Integration\n1. Restart your application\n2. The dashboard should now pull data from your Airtable base\n3. Navigate to different pages to see your real data\n\n## Field Mapping Reference\n\nThe dashboard expects specific field names. Make sure your Airtable fields match exactly:\n\n### Leads Table Fields:\n- `Name` → Lead name\n- `Email` → Lead email\n- `Phone` → Lead phone\n- `Company` → Lead company\n- `Status` → Lead status\n- `Stage` → Pipeline stage\n- `Value` → Deal value\n- `Source` → Lead source\n- `Priority` → Lead priority\n\n### Alternative Field Names:\nIf you prefer different field names, the system also accepts lowercase versions:\n- `name`, `email`, `phone`, `company`, `status`, `stage`, `value`, `source`\n\n## Troubleshooting\n\n### Common Issues:\n1. **No data showing:** Check that your API key has the correct permissions\n2. **Missing leads:** Verify your table is named exactly \"Leads\"\n3. **API errors:** Check your Base ID is correct (starts with \"app\")\n\n### Error Messages:\n- `Airtable API error: 401` → API key is invalid\n- `Airtable API error: 404` → Base ID is incorrect or table doesn't exist\n- `No replacement was performed` → Table or field names don't match\n\n## Advanced Features\n\n### Custom Fields:\nYou can add additional fields to your tables. The dashboard will ignore fields it doesn't recognize.\n\n### Formulas:\nYou can use Airtable formulas for calculated fields like:\n- Lead score calculations\n- Days since last contact\n- Revenue projections\n\n### Views:\nCreate different views in Airtable to organize your data:\n- Hot leads (high priority)\n- Recent activities\n- This month's meetings\n\nThe dashboard will pull all records regardless of the view, but views help you manage data in Airtable.","size_bytes":6934},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI Sales Dashboard\n\n## Overview\n\nThis is a modern React-based AI sales automation dashboard built with a full-stack architecture. The application provides a comprehensive interface for managing sales leads, tracking pipeline performance, scheduling meetings, and monitoring AI-driven sales activities. It features a clean, responsive design using shadcn/ui components and includes real-time analytics and automation controls for sales teams.\n\n## Recent Changes (January 2025)\n\n### Completed Dashboard Pages:\n- **Lead Insights**: Connected to Airtable 'L1 - Enriched Leads' table with real-time sync\n- **Pipeline Stages**: Interactive 8-stage journey map with conversion funnel visualization  \n- **Meetings View**: Command center with calendar/table views and performance metrics\n- **Nurture Campaigns**: Campaign management with journey flow and performance analytics\n- **AI Assistant**: Chat interface with context suggestions and voice interaction panel\n- **Automation Control Center**: Mission-control style automation management with status board, flow visualizer, and trigger controls\n\nAll pages use professional B2B design with mock data and are ready for backend integration when requested.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool for fast development and optimized production builds\n- **Wouter** for lightweight client-side routing instead of React Router\n- **TanStack Query (React Query)** for server state management and caching\n- **shadcn/ui** component library built on Radix UI primitives for accessible, customizable components\n- **Tailwind CSS** for utility-first styling with CSS variables for theming\n\n### Backend Architecture\n- **Express.js** server with TypeScript support\n- **RESTful API** design with endpoints for dashboard metrics, leads, meetings, and activities\n- **Modular route structure** with centralized error handling middleware\n- **Storage abstraction layer** allowing for different database implementations\n- **Development-optimized** with Vite integration for hot module replacement\n\n### Data Layer\n- **Drizzle ORM** for type-safe database operations and schema management\n- **PostgreSQL** as the primary database (configured via Neon serverless)\n- **Schema-first approach** with shared TypeScript types between client and server\n- **Zod integration** for runtime schema validation and type inference\n\n### Component Organization\n- **Atomic design principles** with reusable UI components in `/components/ui/`\n- **Feature-based components** in `/components/dashboard/` for business logic\n- **Page-level components** for route handling and layout composition\n- **Custom hooks** for shared logic like mobile detection and toast notifications\n\n### Styling and Theming\n- **CSS Variables** for dynamic theming (light/dark mode support)\n- **Responsive design** with mobile-first approach using Tailwind breakpoints\n- **shadcn/ui theming system** with customizable color schemes and component variants\n- **Consistent design tokens** for spacing, typography, and color usage\n\n### Development Workflow\n- **TypeScript strict mode** with comprehensive type checking\n- **Path aliases** for clean imports (`@/`, `@shared/`)\n- **Hot reload** development server with error overlays\n- **Build optimization** with separate client and server bundling\n\n### State Management\n- **React Query** for server state with automatic caching and background updates\n- **React Context** for theme management and global UI state\n- **Local component state** for UI interactions and form handling\n- **URL state** managed through Wouter for navigation and deep linking\n\n## External Dependencies\n\n### Database Services\n- **Neon Database** - Serverless PostgreSQL hosting with connection pooling\n- **connect-pg-simple** - PostgreSQL session store for Express sessions\n\n### UI and Styling\n- **Radix UI** - Headless component primitives for accessibility\n- **Tailwind CSS** - Utility-first CSS framework\n- **Lucide React** - Icon library for consistent iconography\n- **Recharts** - Chart library for data visualization\n\n### Development Tools\n- **ESBuild** - Fast JavaScript bundler for production builds\n- **TSX** - TypeScript execution for development server\n- **Drizzle Kit** - Database migration and introspection tools\n\n### Form and Validation\n- **React Hook Form** - Performance-focused form library\n- **Zod** - Schema validation for both client and server\n- **@hookform/resolvers** - Integration between React Hook Form and Zod\n\n### Data Fetching\n- **TanStack React Query** - Server state management with caching\n- **Fetch API** - Native HTTP client for API requests\n\n### Utilities\n- **date-fns** - Date manipulation and formatting\n- **clsx/twMerge** - Conditional CSS class composition\n- **nanoid** - Unique ID generation\n- **class-variance-authority** - Type-safe component variant management","size_bytes":4983},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/airtable-storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Lead, \n  type InsertLead,\n  type Meeting,\n  type InsertMeeting,\n  type Activity,\n  type InsertActivity,\n  type Campaign,\n  type InsertCampaign,\n  type SystemStats,\n  type InsertSystemStats,\n  type DashboardMetrics,\n  type EnrichedActivity\n} from \"@shared/schema\";\nimport { airtableService } from \"./airtable\";\nimport type { IStorage } from \"./storage\";\n\nexport class AirtableStorage implements IStorage {\n  // User methods - keeping simple memory storage for users since they're for authentication\n  private users: Map<string, User> = new Map();\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = { ...insertUser, id: crypto.randomUUID() };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  // Lead methods - using Airtable\n  async getLeads(): Promise<Lead[]> {\n    try {\n      return await airtableService.getLeads();\n    } catch (error) {\n      console.error('Error fetching leads, falling back to empty array:', error);\n      return [];\n    }\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    const leads = await airtableService.getLeads();\n    return leads.find(lead => lead.id === id);\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    // Note: For creating new leads, you'd need to implement POST to Airtable\n    // For now, we'll throw an error since this is read-only\n    throw new Error(\"Creating leads through Airtable not implemented yet\");\n  }\n\n  async updateLead(id: string, leadUpdate: Partial<InsertLead>): Promise<Lead | undefined> {\n    // Note: For updating leads, you'd need to implement PATCH to Airtable\n    // For now, we'll throw an error since this is read-only\n    throw new Error(\"Updating leads through Airtable not implemented yet\");\n  }\n\n  // Meeting methods - using Airtable\n  async getMeetings(): Promise<Meeting[]> {\n    return await airtableService.getMeetings();\n  }\n\n  async getMeetingsByLeadId(leadId: string): Promise<Meeting[]> {\n    const meetings = await airtableService.getMeetings();\n    return meetings.filter(meeting => meeting.leadId === leadId);\n  }\n\n  async createMeeting(insertMeeting: InsertMeeting): Promise<Meeting> {\n    // Note: For creating meetings, you'd need to implement POST to Airtable\n    throw new Error(\"Creating meetings through Airtable not implemented yet\");\n  }\n\n  // Activity methods - using Airtable\n  async getActivities(limit?: number): Promise<Activity[]> {\n    return await airtableService.getActivities(limit);\n  }\n\n  async getRecentActivities(limit: number = 5): Promise<EnrichedActivity[]> {\n    return await airtableService.getRecentActivities(limit);\n  }\n\n  async createActivity(insertActivity: InsertActivity): Promise<Activity> {\n    // Note: For creating activities, you'd need to implement POST to Airtable\n    throw new Error(\"Creating activities through Airtable not implemented yet\");\n  }\n\n  // Campaign methods - using Airtable\n  async getCampaigns(): Promise<Campaign[]> {\n    return await airtableService.getCampaigns();\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    // Note: For creating campaigns, you'd need to implement POST to Airtable\n    throw new Error(\"Creating campaigns through Airtable not implemented yet\");\n  }\n\n  // System stats methods - using Airtable\n  async getSystemStats(): Promise<SystemStats[]> {\n    return await airtableService.getSystemStats();\n  }\n\n  async createSystemStats(insertStats: InsertSystemStats): Promise<SystemStats> {\n    // Note: For creating system stats, you'd need to implement POST to Airtable\n    throw new Error(\"Creating system stats through Airtable not implemented yet\");\n  }\n\n  // Dashboard methods - using Airtable\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    return await airtableService.getDashboardMetrics();\n  }\n}","size_bytes":4125},"server/airtable.ts":{"content":"import type { \n  Lead, \n  Meeting, \n  Activity, \n  Campaign, \n  SystemStats,\n  DashboardMetrics,\n  EnrichedActivity \n} from \"@shared/schema\";\n\ninterface AirtableRecord {\n  id: string;\n  fields: Record<string, any>;\n  createdTime: string;\n}\n\ninterface AirtableResponse {\n  records: AirtableRecord[];\n  offset?: string;\n}\n\nexport class AirtableService {\n  private baseUrl: string;\n  private headers: Record<string, string>;\n\n  constructor() {\n    const apiKey = process.env.AIRTABLE_API_KEY;\n    const baseId = process.env.AIRTABLE_BASE_ID;\n    \n    if (!apiKey || !baseId) {\n      throw new Error('AIRTABLE_API_KEY and AIRTABLE_BASE_ID must be set');\n    }\n\n    this.baseUrl = `https://api.airtable.com/v0/${baseId}`;\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  private async fetchRecords(tableName: string, params?: Record<string, string>): Promise<AirtableRecord[]> {\n    try {\n      // Encode table name for URL\n      const encodedTableName = encodeURIComponent(tableName);\n      const url = new URL(`${this.baseUrl}/${encodedTableName}`);\n      \n      if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n          url.searchParams.append(key, value);\n        });\n      }\n\n      console.log(`Fetching from Airtable: ${url.toString()}`);\n\n      const response = await fetch(url.toString(), {\n        headers: this.headers,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`Airtable API error response:`, errorText);\n        throw new Error(`Airtable API error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const data: AirtableResponse = await response.json();\n      console.log(`Successfully fetched ${data.records.length} records from ${tableName}`);\n      return data.records;\n    } catch (error) {\n      console.error(`Error fetching ${tableName}:`, error);\n      throw error;\n    }\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    try {\n      // Try the specific table name first\n      let records;\n      try {\n        records = await this.fetchRecords('L1 - Enriched Leads');\n      } catch (tableError) {\n        console.log('L1 - Enriched Leads table not found, trying Leads table');\n        records = await this.fetchRecords('Leads');\n      }\n      \n      return records.map(record => {\n        const fields = record.fields;\n        \n        // Log the actual field structure for debugging\n        console.log('Airtable record fields:', Object.keys(fields));\n        console.log('Sample field data:', fields);\n        \n        // Combine first name and last name for full name\n        const firstName = fields['first name'] || fields['First Name'] || fields.firstName || '';\n        const lastName = fields['last name'] || fields['Last Name'] || fields.lastName || '';\n        const fullName = [firstName, lastName].filter(Boolean).join(' ') || \n                        fields.Name || fields.name || fields['Lead Name'] || 'Unknown';\n        \n        return {\n          id: record.id,\n          name: fullName,\n          email: fields.Email || fields.email || fields['Email Address'] || fields['email address'] || '',\n          phone: fields.Phone || fields.phone || fields['Phone Number'] || fields['phone number'] || null,\n          company: fields.Company || fields.company || fields['Company Name'] || fields['company name'] || null,\n          status: fields.Status || fields.status || fields['Lead Status'] || fields['lead status'] || 'new',\n          stage: fields.Stage || fields.stage || fields['Pipeline Stage'] || fields['pipeline stage'] || 'lead',\n          value: fields.Value || fields.value || fields['Deal Value'] || fields['deal value'] || fields['Potential Value'] || null,\n          source: fields.Source || fields.source || fields['Lead Source'] || fields['lead source'] || null,\n          assignedTo: fields['Assigned To'] || fields.assignedTo || fields['Sales Rep'] || fields['sales rep'] || null,\n          createdAt: new Date(record.createdTime),\n          updatedAt: new Date(fields['Updated At'] || fields.updatedAt || fields['Last Modified'] || fields['last modified'] || record.createdTime),\n          lastContactedAt: fields['Last Contacted'] || fields.lastContactedAt || fields['Last Contact Date'] || fields['last contact date'] ? \n            new Date(fields['Last Contacted'] || fields.lastContactedAt || fields['Last Contact Date'] || fields['last contact date']) : null,\n          notes: fields.Notes || fields.notes || fields.Comments || fields.comments || null,\n          metadata: this.parseMetadata(fields, firstName, lastName)\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching leads from Airtable:', error);\n      return [];\n    }\n  }\n\n  private parseMetadata(fields: Record<string, any>, firstName?: string, lastName?: string) {\n    // Try to parse JSON metadata first\n    if (fields.Metadata) {\n      try {\n        return JSON.parse(fields.Metadata);\n      } catch (e) {\n        // If JSON parsing fails, continue with fallback\n      }\n    }\n    \n    // Create metadata from individual fields and include all available data\n    const metadata: any = {\n      priority: fields.Priority || fields.priority || fields['Lead Priority'] || fields['lead priority'] || 'medium',\n      industry: fields.Industry || fields.industry || null,\n      leadScore: fields['Lead Score'] || fields.leadScore || fields['lead score'] || null,\n      tags: fields.Tags || fields.tags || null,\n      firstName: firstName || null,\n      lastName: lastName || null\n    };\n    \n    // Add any other fields that might be useful\n    Object.keys(fields).forEach(key => {\n      const lowerKey = key.toLowerCase().replace(/\\s+/g, '_');\n      if (!metadata[lowerKey] && !['first name', 'last name', 'email', 'phone', 'company', 'status', 'stage', 'value', 'source'].includes(key.toLowerCase())) {\n        metadata[lowerKey] = fields[key];\n      }\n    });\n    \n    return metadata;\n  }\n\n  async getMeetings(): Promise<Meeting[]> {\n    try {\n      const records = await this.fetchRecords('Meetings');\n      \n      return records.map(record => {\n        const fields = record.fields;\n        return {\n          id: record.id,\n          leadId: fields['Lead ID'] || fields.leadId || '',\n          title: fields.Title || fields.title || 'Meeting',\n          scheduledAt: new Date(fields['Scheduled At'] || fields.scheduledAt),\n          duration: fields.Duration || fields.duration || 30,\n          status: fields.Status || fields.status || 'scheduled',\n          meetingType: fields.Type || fields.meetingType || 'discovery',\n          notes: fields.Notes || fields.notes || null,\n          createdAt: new Date(record.createdTime),\n          updatedAt: new Date(fields['Updated At'] || fields.updatedAt || record.createdTime),\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching meetings from Airtable:', error);\n      return [];\n    }\n  }\n\n  async getActivities(limit?: number): Promise<Activity[]> {\n    try {\n      const params: Record<string, string> = {\n        'sort[0][field]': 'Created At',\n        'sort[0][direction]': 'desc'\n      };\n      \n      if (limit) {\n        params.maxRecords = limit.toString();\n      }\n\n      const records = await this.fetchRecords('Activities', params);\n      \n      return records.map(record => {\n        const fields = record.fields;\n        return {\n          id: record.id,\n          leadId: fields['Lead ID'] || fields.leadId || null,\n          type: fields.Type || fields.type || 'note',\n          description: fields.Description || fields.description || '',\n          status: fields.Status || fields.status || 'completed',\n          metadata: fields.Metadata ? JSON.parse(fields.Metadata) : null,\n          createdAt: new Date(record.createdTime),\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching activities from Airtable:', error);\n      return [];\n    }\n  }\n\n  async getCampaigns(): Promise<Campaign[]> {\n    try {\n      const records = await this.fetchRecords('Campaigns');\n      \n      return records.map(record => {\n        const fields = record.fields;\n        return {\n          id: record.id,\n          name: fields.Name || fields.name || 'Campaign',\n          type: fields.Type || fields.type || 'email',\n          status: fields.Status || fields.status || 'active',\n          targetSegment: fields['Target Segment'] || fields.targetSegment || null,\n          createdAt: new Date(record.createdTime),\n          updatedAt: new Date(fields['Updated At'] || fields.updatedAt || record.createdTime),\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching campaigns from Airtable:', error);\n      return [];\n    }\n  }\n\n  async getSystemStats(): Promise<SystemStats[]> {\n    try {\n      const records = await this.fetchRecords('System Stats', {\n        'sort[0][field]': 'Date',\n        'sort[0][direction]': 'desc'\n      });\n      \n      return records.map(record => {\n        const fields = record.fields;\n        return {\n          id: record.id,\n          date: new Date(fields.Date || record.createdTime),\n          callsCompleted: fields['Calls Completed'] || fields.callsCompleted || 0,\n          meetingsScheduled: fields['Meetings Scheduled'] || fields.meetingsScheduled || 0,\n          emailsSent: fields['Emails Sent'] || fields.emailsSent || 0,\n          responseRate: fields['Response Rate'] || fields.responseRate || null,\n          showRate: fields['Show Rate'] || fields.showRate || null,\n          conversionRate: fields['Conversion Rate'] || fields.conversionRate || null,\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching system stats from Airtable:', error);\n      return [];\n    }\n  }\n\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    try {\n      const [leads, meetings, activities, stats] = await Promise.all([\n        this.getLeads(),\n        this.getMeetings(),\n        this.getActivities(),\n        this.getSystemStats()\n      ]);\n\n      const totalLeads = leads.length;\n      const contactedLeads = leads.filter(lead => \n        ['contacted', 'qualified', 'meeting_booked', 'closed'].includes(lead.status)\n      ).length;\n      const meetingsBooked = meetings.filter(meeting => \n        meeting.status === 'scheduled'\n      ).length;\n\n      const potentialDealsValue = leads\n        .filter(lead => lead.value)\n        .reduce((sum, lead) => sum + parseFloat(lead.value || '0'), 0);\n\n      const potentialDeals = potentialDealsValue > 1000000 \n        ? `$${(potentialDealsValue / 1000000).toFixed(1)}M`\n        : potentialDealsValue > 1000\n        ? `$${(potentialDealsValue / 1000).toFixed(1)}K`\n        : `$${potentialDealsValue.toLocaleString()}`;\n\n      // Get today's stats\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todayStats = stats.find(stat => {\n        const statDate = new Date(stat.date);\n        statDate.setHours(0, 0, 0, 0);\n        return statDate.getTime() === today.getTime();\n      });\n\n      const callsToday = todayStats?.callsCompleted || 0;\n      const meetingsScheduled = todayStats?.meetingsScheduled || 0;\n      const showRate = todayStats?.showRate ? `${todayStats.showRate}%` : '0%';\n\n      // Generate pipeline data from recent activities/leads\n      const pipelineData = this.generatePipelineData(leads, activities);\n\n      return {\n        totalLeads,\n        contactedLeads,\n        meetingsBooked,\n        potentialDeals,\n        callsToday,\n        meetingsScheduled,\n        showRate,\n        pipelineData\n      };\n    } catch (error) {\n      console.error('Error calculating dashboard metrics:', error);\n      // Return fallback metrics if Airtable fails\n      return {\n        totalLeads: 0,\n        contactedLeads: 0,\n        meetingsBooked: 0,\n        potentialDeals: '$0',\n        callsToday: 0,\n        meetingsScheduled: 0,\n        showRate: '0%',\n        pipelineData: []\n      };\n    }\n  }\n\n  async getRecentActivities(limit: number = 5): Promise<EnrichedActivity[]> {\n    try {\n      const [activities, leads] = await Promise.all([\n        this.getActivities(limit),\n        this.getLeads()\n      ]);\n\n      const leadMap = new Map(leads.map(lead => [lead.id, lead]));\n\n      return activities.map(activity => {\n        const lead = activity.leadId ? leadMap.get(activity.leadId) : undefined;\n        const timeAgo = this.getTimeAgo(activity.createdAt!);\n        const category = (activity.metadata as any)?.category || this.getCategoryFromType(activity.type);\n\n        return {\n          ...activity,\n          leadName: lead?.name,\n          timeAgo,\n          category\n        };\n      });\n    } catch (error) {\n      console.error('Error fetching recent activities:', error);\n      return [];\n    }\n  }\n\n  private generatePipelineData(leads: Lead[], activities: Activity[]) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const currentMonth = new Date().getMonth();\n    \n    // Generate data for last 12 months based on actual lead creation dates\n    const pipelineData = months.map((month, index) => {\n      const monthIndex = (currentMonth - 11 + index + 12) % 12;\n      const year = new Date().getFullYear() - (currentMonth - 11 + index < 0 ? 1 : 0);\n      \n      const monthLeads = leads.filter(lead => {\n        if (!lead.createdAt) return false;\n        const leadDate = new Date(lead.createdAt);\n        return leadDate.getMonth() === monthIndex && leadDate.getFullYear() === year;\n      });\n\n      const monthContacted = monthLeads.filter(lead => \n        ['contacted', 'qualified', 'meeting_booked', 'closed'].includes(lead.status)\n      );\n\n      const monthMeetings = monthLeads.filter(lead => \n        lead.status === 'meeting_booked'\n      );\n\n      return {\n        month: months[monthIndex],\n        totalLeads: monthLeads.length,\n        contacted: monthContacted.length,\n        meetingsBooked: monthMeetings.length\n      };\n    });\n\n    return pipelineData;\n  }\n\n  private getCategoryFromType(type: string): string {\n    switch (type) {\n      case 'lead_added':\n        return 'Lead Generation';\n      case 'call':\n        return 'Outreach';\n      case 'meeting':\n        return 'Meeting';\n      case 'deal_closed':\n        return 'Conversion';\n      case 'email':\n        return 'Email';\n      default:\n        return 'General';\n    }\n  }\n\n  private getTimeAgo(date: Date | null): string {\n    if (!date) return 'Unknown';\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes === 1) return '1 minute ago';\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours === 1) return '1 hour ago';\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays === 1) return '1 day ago';\n    return `${diffInDays} days ago`;\n  }\n}\n\nexport const airtableService = new AirtableService();","size_bytes":15201},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard metrics endpoint\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Recent activities endpoint\n  app.get(\"/api/dashboard/activities\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 5;\n      const activities = await storage.getRecentActivities(limit);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch recent activities\" });\n    }\n  });\n\n  // Test Airtable connection\n  app.get(\"/api/test-airtable\", async (req, res) => {\n    try {\n      const apiKey = process.env.AIRTABLE_API_KEY;\n      const baseId = process.env.AIRTABLE_BASE_ID;\n      \n      if (!apiKey || !baseId) {\n        return res.json({ \n          status: \"error\", \n          message: \"Missing API credentials\",\n          hasApiKey: !!apiKey,\n          hasBaseId: !!baseId\n        });\n      }\n\n      // Test basic API access\n      const baseUrl = `https://api.airtable.com/v0/${baseId}`;\n      const response = await fetch(`${baseUrl}/L1%20-%20Enriched%20Leads?maxRecords=1`, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return res.json({\n          status: \"error\",\n          statusCode: response.status,\n          message: response.statusText,\n          details: errorText\n        });\n      }\n\n      const data = await response.json();\n      res.json({\n        status: \"success\",\n        message: \"Airtable connection successful\",\n        recordCount: data.records?.length || 0,\n        sampleRecord: data.records?.[0] || null\n      });\n    } catch (error) {\n      res.json({\n        status: \"error\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Leads endpoints\n  app.get(\"/api/leads\", async (req, res) => {\n    try {\n      const leads = await storage.getLeads();\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error in /api/leads:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch leads\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", async (req, res) => {\n    try {\n      const lead = await storage.getLead(req.params.id);\n      if (!lead) {\n        return res.status(404).json({ error: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch lead\" });\n    }\n  });\n\n  // Meetings endpoints\n  app.get(\"/api/meetings\", async (req, res) => {\n    try {\n      const meetings = await storage.getMeetings();\n      res.json(meetings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch meetings\" });\n    }\n  });\n\n  // Campaigns endpoints\n  app.get(\"/api/campaigns\", async (req, res) => {\n    try {\n      const campaigns = await storage.getCampaigns();\n      res.json(campaigns);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3573},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Lead, \n  type InsertLead,\n  type Meeting,\n  type InsertMeeting,\n  type Activity,\n  type InsertActivity,\n  type Campaign,\n  type InsertCampaign,\n  type SystemStats,\n  type InsertSystemStats,\n  type DashboardMetrics,\n  type EnrichedActivity\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { airtableService } from \"./airtable\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Lead methods\n  getLeads(): Promise<Lead[]>;\n  getLead(id: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n\n  // Meeting methods\n  getMeetings(): Promise<Meeting[]>;\n  getMeetingsByLeadId(leadId: string): Promise<Meeting[]>;\n  createMeeting(meeting: InsertMeeting): Promise<Meeting>;\n\n  // Activity methods\n  getActivities(limit?: number): Promise<Activity[]>;\n  getRecentActivities(limit?: number): Promise<EnrichedActivity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n  // Campaign methods\n  getCampaigns(): Promise<Campaign[]>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n\n  // System stats methods\n  getSystemStats(): Promise<SystemStats[]>;\n  createSystemStats(stats: InsertSystemStats): Promise<SystemStats>;\n\n  // Dashboard methods\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private leads: Map<string, Lead>;\n  private meetings: Map<string, Meeting>;\n  private activities: Map<string, Activity>;\n  private campaigns: Map<string, Campaign>;\n  private systemStats: Map<string, SystemStats>;\n\n  constructor() {\n    this.users = new Map();\n    this.leads = new Map();\n    this.meetings = new Map();\n    this.activities = new Map();\n    this.campaigns = new Map();\n    this.systemStats = new Map();\n    \n    // Initialize with some sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample leads\n    const sampleLeads: Lead[] = [\n      {\n        id: randomUUID(),\n        name: \"Sarah Johnson\",\n        email: \"sarah@techcorp.com\",\n        phone: \"+1-555-0123\",\n        company: \"TechCorp Solutions\",\n        status: \"contacted\",\n        stage: \"prospect\",\n        value: \"45000.00\",\n        source: \"referral\",\n        assignedTo: null,\n        createdAt: new Date(Date.now() - 2 * 60 * 1000), // 2 minutes ago\n        updatedAt: new Date(),\n        lastContactedAt: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\n        notes: \"High-value prospect, interested in enterprise solution\",\n        metadata: { priority: \"high\" }\n      },\n      {\n        id: randomUUID(),\n        name: \"Mike Chen\",\n        email: \"mike@startupinc.com\",\n        phone: \"+1-555-0124\",\n        company: \"Startup Inc\",\n        status: \"contacted\",\n        stage: \"lead\",\n        value: \"12000.00\",\n        source: \"website\",\n        assignedTo: null,\n        createdAt: new Date(Date.now() - 10 * 60 * 1000),\n        updatedAt: new Date(),\n        lastContactedAt: new Date(Date.now() - 5 * 60 * 1000),\n        notes: \"Interested in basic package\",\n        metadata: { priority: \"medium\" }\n      },\n      {\n        id: randomUUID(),\n        name: \"Alex Rodriguez\",\n        email: \"alex@bigcorp.com\",\n        phone: \"+1-555-0125\",\n        company: \"Big Corp\",\n        status: \"meeting_booked\",\n        stage: \"opportunity\",\n        value: \"75000.00\",\n        source: \"cold_outreach\",\n        assignedTo: null,\n        createdAt: new Date(Date.now() - 30 * 60 * 1000),\n        updatedAt: new Date(),\n        lastContactedAt: new Date(Date.now() - 12 * 60 * 1000),\n        notes: \"Meeting scheduled for product demo\",\n        metadata: { priority: \"high\" }\n      }\n    ];\n\n    sampleLeads.forEach(lead => this.leads.set(lead.id, lead));\n\n    // Sample activities\n    const sampleActivities: Activity[] = [\n      {\n        id: randomUUID(),\n        leadId: sampleLeads[0].id,\n        type: \"lead_added\",\n        description: `New lead ${sampleLeads[0].name} added to pipeline`,\n        status: \"completed\",\n        metadata: { category: \"Lead Generation\" },\n        createdAt: new Date(Date.now() - 2 * 60 * 1000)\n      },\n      {\n        id: randomUUID(),\n        leadId: sampleLeads[1].id,\n        type: \"call\",\n        description: `AI completed call with ${sampleLeads[1].name}`,\n        status: \"completed\",\n        metadata: { category: \"Outreach\", duration: 180 },\n        createdAt: new Date(Date.now() - 5 * 60 * 1000)\n      },\n      {\n        id: randomUUID(),\n        leadId: sampleLeads[2].id,\n        type: \"meeting\",\n        description: `Meeting scheduled with ${sampleLeads[2].name}`,\n        status: \"completed\",\n        metadata: { category: \"Meeting\" },\n        createdAt: new Date(Date.now() - 12 * 60 * 1000)\n      },\n      {\n        id: randomUUID(),\n        leadId: randomUUID(),\n        type: \"call\",\n        description: \"Call attempt failed for Jennifer Davis\",\n        status: \"failed\",\n        metadata: { category: \"Error\", reason: \"number_disconnected\" },\n        createdAt: new Date(Date.now() - 18 * 60 * 1000)\n      },\n      {\n        id: randomUUID(),\n        leadId: sampleLeads[0].id,\n        type: \"deal_closed\",\n        description: `Deal closed with ${sampleLeads[0].company} - $45,000`,\n        status: \"completed\",\n        metadata: { category: \"Conversion\", value: 45000 },\n        createdAt: new Date(Date.now() - 23 * 60 * 1000)\n      }\n    ];\n\n    sampleActivities.forEach(activity => this.activities.set(activity.id, activity));\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Lead methods\n  async getLeads(): Promise<Lead[]> {\n    return Array.from(this.leads.values());\n  }\n\n  async getLead(id: string): Promise<Lead | undefined> {\n    return this.leads.get(id);\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const id = randomUUID();\n    const lead: Lead = {\n      ...insertLead,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.leads.set(id, lead);\n    return lead;\n  }\n\n  async updateLead(id: string, leadUpdate: Partial<InsertLead>): Promise<Lead | undefined> {\n    const lead = this.leads.get(id);\n    if (!lead) return undefined;\n\n    const updatedLead: Lead = {\n      ...lead,\n      ...leadUpdate,\n      updatedAt: new Date(),\n    };\n    this.leads.set(id, updatedLead);\n    return updatedLead;\n  }\n\n  // Meeting methods\n  async getMeetings(): Promise<Meeting[]> {\n    return Array.from(this.meetings.values());\n  }\n\n  async getMeetingsByLeadId(leadId: string): Promise<Meeting[]> {\n    return Array.from(this.meetings.values()).filter(\n      (meeting) => meeting.leadId === leadId\n    );\n  }\n\n  async createMeeting(insertMeeting: InsertMeeting): Promise<Meeting> {\n    const id = randomUUID();\n    const meeting: Meeting = {\n      ...insertMeeting,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.meetings.set(id, meeting);\n    return meeting;\n  }\n\n  // Activity methods\n  async getActivities(limit?: number): Promise<Activity[]> {\n    const activities = Array.from(this.activities.values())\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n    \n    return limit ? activities.slice(0, limit) : activities;\n  }\n\n  async getRecentActivities(limit: number = 5): Promise<EnrichedActivity[]> {\n    const activities = await this.getActivities(limit);\n    \n    return activities.map(activity => {\n      const lead = activity.leadId ? this.leads.get(activity.leadId) : undefined;\n      const timeAgo = this.getTimeAgo(activity.createdAt!);\n      const category = activity.metadata?.category || 'General';\n      \n      return {\n        ...activity,\n        leadName: lead?.name,\n        timeAgo,\n        category\n      };\n    });\n  }\n\n  async createActivity(insertActivity: InsertActivity): Promise<Activity> {\n    const id = randomUUID();\n    const activity: Activity = {\n      ...insertActivity,\n      id,\n      createdAt: new Date(),\n    };\n    this.activities.set(id, activity);\n    return activity;\n  }\n\n  // Campaign methods\n  async getCampaigns(): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values());\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const id = randomUUID();\n    const campaign: Campaign = {\n      ...insertCampaign,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  // System stats methods\n  async getSystemStats(): Promise<SystemStats[]> {\n    return Array.from(this.systemStats.values());\n  }\n\n  async createSystemStats(insertStats: InsertSystemStats): Promise<SystemStats> {\n    const id = randomUUID();\n    const stats: SystemStats = {\n      ...insertStats,\n      id,\n      date: new Date(),\n    };\n    this.systemStats.set(id, stats);\n    return stats;\n  }\n\n  // Dashboard methods\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const leads = Array.from(this.leads.values());\n    const meetings = Array.from(this.meetings.values());\n    \n    const totalLeads = leads.length;\n    const contactedLeads = leads.filter(lead => \n      ['contacted', 'qualified', 'meeting_booked', 'closed'].includes(lead.status)\n    ).length;\n    const meetingsBooked = meetings.filter(meeting => \n      meeting.status === 'scheduled'\n    ).length;\n    \n    const potentialDealsValue = leads\n      .filter(lead => lead.value)\n      .reduce((sum, lead) => sum + parseFloat(lead.value || '0'), 0);\n    \n    // Generate pipeline data for the last 12 months\n    const pipelineData = this.generatePipelineData();\n    \n    return {\n      totalLeads: 2847,\n      contactedLeads: 1924,\n      meetingsBooked: 342,\n      potentialDeals: '$1.2M',\n      callsToday: 147,\n      meetingsScheduled: 23,\n      showRate: '78.5%',\n      pipelineData\n    };\n  }\n\n  private generatePipelineData() {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    return months.map(month => ({\n      month,\n      totalLeads: Math.floor(Math.random() * 1000) + 1200,\n      contacted: Math.floor(Math.random() * 800) + 750,\n      meetingsBooked: Math.floor(Math.random() * 200) + 105\n    }));\n  }\n\n  private getTimeAgo(date: Date): string {\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes === 1) return '1 minute ago';\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours === 1) return '1 hour ago';\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays === 1) return '1 day ago';\n    return `${diffInDays} days ago`;\n  }\n}\n\nimport { AirtableStorage } from \"./airtable-storage\";\n\n// Use Airtable storage if API keys are available, otherwise fall back to memory storage\nexport const storage = process.env.AIRTABLE_API_KEY && process.env.AIRTABLE_BASE_ID \n  ? new AirtableStorage() \n  : new MemStorage();\n","size_bytes":11835},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  company: text(\"company\"),\n  status: text(\"status\").notNull().default(\"new\"), // new, contacted, qualified, meeting_booked, closed, lost\n  stage: text(\"stage\").notNull().default(\"lead\"), // lead, prospect, opportunity, deal\n  value: decimal(\"value\", { precision: 10, scale: 2 }),\n  source: text(\"source\"),\n  assignedTo: varchar(\"assigned_to\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n  lastContactedAt: timestamp(\"last_contacted_at\"),\n  notes: text(\"notes\"),\n  metadata: jsonb(\"metadata\"),\n});\n\nexport const meetings = pgTable(\"meetings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").notNull(),\n  title: text(\"title\").notNull(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(30), // minutes\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, completed, cancelled, no_show\n  meetingType: text(\"meeting_type\").default(\"discovery\"), // discovery, demo, closing, follow_up\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\"),\n  type: text(\"type\").notNull(), // call, email, meeting, note, status_change\n  description: text(\"description\").notNull(),\n  status: text(\"status\").default(\"completed\"), // completed, pending, failed\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // email, sms, call, mixed\n  status: text(\"status\").notNull().default(\"active\"), // active, paused, completed\n  targetSegment: text(\"target_segment\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const systemStats = pgTable(\"system_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull().default(sql`now()`),\n  callsCompleted: integer(\"calls_completed\").default(0),\n  meetingsScheduled: integer(\"meetings_scheduled\").default(0),\n  emailsSent: integer(\"emails_sent\").default(0),\n  responseRate: decimal(\"response_rate\", { precision: 5, scale: 2 }),\n  showRate: decimal(\"show_rate\", { precision: 5, scale: 2 }),\n  conversionRate: decimal(\"conversion_rate\", { precision: 5, scale: 2 }),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMeetingSchema = createInsertSchema(meetings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSystemStatsSchema = createInsertSchema(systemStats).omit({\n  id: true,\n  date: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\n\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\nexport type Meeting = typeof meetings.$inferSelect;\n\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type Activity = typeof activities.$inferSelect;\n\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\n\nexport type InsertSystemStats = z.infer<typeof insertSystemStatsSchema>;\nexport type SystemStats = typeof systemStats.$inferSelect;\n\n// Dashboard metrics type\nexport interface DashboardMetrics {\n  totalLeads: number;\n  contactedLeads: number;\n  meetingsBooked: number;\n  potentialDeals: string;\n  callsToday: number;\n  meetingsScheduled: number;\n  showRate: string;\n  pipelineData: Array<{\n    month: string;\n    totalLeads: number;\n    contacted: number;\n    meetingsBooked: number;\n  }>;\n}\n\n// Recent activity with enriched data\nexport interface EnrichedActivity extends Activity {\n  leadName?: string;\n  timeAgo: string;\n  category: string;\n}\n","size_bytes":5207},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport AnalyticsOverview from \"@/pages/analytics-overview\";\nimport LeadInsights from \"@/pages/lead-insights\";\nimport PipelineStages from \"@/pages/pipeline-stages\";\nimport MeetingsView from \"@/pages/meetings-view\";\nimport NurtureCampaigns from \"@/pages/nurture-campaigns\";\nimport AIAssistant from \"@/pages/ai-assistant\";\nimport AutomationControl from \"@/pages/automation-control\";\nimport AirtableTest from \"@/pages/airtable-test\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={AnalyticsOverview} />\n      <Route path=\"/leads\" component={LeadInsights} />\n      <Route path=\"/test-airtable\" component={AirtableTest} />\n      {/* Placeholder routes for future pages */}\n      <Route path=\"/pipeline\" component={PipelineStages} />\n      <Route path=\"/meetings\" component={MeetingsView} />\n      <Route path=\"/campaigns\" component={NurtureCampaigns} />\n      <Route path=\"/assistant\" component={AIAssistant} />\n      <Route path=\"/automation\" component={AutomationControl} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"dashboard-theme\">\n        <TooltipProvider>\n          <div className=\"flex h-screen overflow-hidden bg-slate-50 dark:bg-slate-900\" data-testid=\"app-container\">\n            <Sidebar />\n            <Router />\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1995},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(60, 9.1%, 97.8%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom dashboard colors */\n  --warning: hsl(24, 74%, 58%);\n  --warning-foreground: hsl(60, 9.1%, 97.8%);\n  --danger: hsl(0, 84.2%, 60.2%);\n  --danger-foreground: hsl(60, 9.1%, 97.8%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  \n  /* Custom dashboard colors for dark mode */\n  --warning: hsl(24, 74%, 58%);\n  --warning-foreground: hsl(0, 0%, 98%);\n  --danger: hsl(0, 62.8%, 30.6%);\n  --danger-foreground: hsl(0, 0%, 98%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-warning {\n    color: hsl(var(--warning));\n  }\n  \n  .text-warning-foreground {\n    color: hsl(var(--warning-foreground));\n  }\n  \n  .bg-warning {\n    background-color: hsl(var(--warning));\n  }\n  \n  .bg-warning-foreground {\n    background-color: hsl(var(--warning-foreground));\n  }\n  \n  .text-danger {\n    color: hsl(var(--danger));\n  }\n  \n  .text-danger-foreground {\n    color: hsl(var(--danger-foreground));\n  }\n  \n  .bg-danger {\n    background-color: hsl(var(--danger));\n  }\n  \n  .bg-danger-foreground {\n    background-color: hsl(var(--danger-foreground));\n  }\n}\n","size_bytes":2687},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Bot, \n  User, \n  Send, \n  Mic, \n  MicOff, \n  Volume2,\n  VolumeX,\n  Zap,\n  Users,\n  TrendingUp,\n  FileText,\n  Clock,\n  Target,\n  Mail,\n  Phone,\n  Calendar,\n  Lightbulb,\n  Sun,\n  Moon,\n  Menu,\n  MessageSquare,\n  Activity\n} from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { format } from \"date-fns\";\n\n// Mock chat messages\nconst mockMessages = [\n  {\n    id: \"1\",\n    type: \"ai\" as const,\n    content: \"Hello! I'm your AI sales assistant. I've been analyzing your pipeline and I have some insights to share. How can I help you today?\",\n    timestamp: new Date(Date.now() - 1000 * 60 * 5),\n    suggestions: [\"Show pipeline insights\", \"Generate weekly report\", \"Review hot leads\"]\n  },\n  {\n    id: \"2\", \n    type: \"user\" as const,\n    content: \"What's the status of my hot leads?\",\n    timestamp: new Date(Date.now() - 1000 * 60 * 3),\n  },\n  {\n    id: \"3\",\n    type: \"ai\" as const,\n    content: \"I found 5 hot leads that need immediate attention:\\n\\n• Sarah Chen (TechCorp) - Meeting scheduled for tomorrow\\n• Lisa Wang (FinTech Pro) - Waiting for technical deep dive\\n• Emily Rodriguez (CloudSync) - Ready for closing call\\n• Mike Thompson (DataFlow) - Follow-up needed after demo\\n• James Wilson (StartupX) - Contract review in progress\\n\\nWould you like me to prioritize these or schedule follow-up actions?\",\n    timestamp: new Date(Date.now() - 1000 * 60 * 2),\n    suggestions: [\"Schedule follow-ups\", \"Generate lead reports\", \"Book meetings\"]\n  }\n];\n\n// Mock context suggestions\nconst contextSuggestions = [\n  {\n    id: \"1\",\n    icon: Clock,\n    title: \"Leads Need Follow-up\",\n    description: \"12 leads haven't been contacted in 7+ days\",\n    color: \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\",\n    action: \"Show overdue leads\"\n  },\n  {\n    id: \"2\", \n    icon: Target,\n    title: \"Hot Leads Alert\",\n    description: \"5 hot leads need immediate attention\",\n    color: \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\",\n    action: \"Review hot leads\"\n  },\n  {\n    id: \"3\",\n    icon: TrendingUp,\n    title: \"Campaign Performance\",\n    description: \"Warm Lead Education campaign performing 23% above average\",\n    color: \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\", \n    action: \"View campaign insights\"\n  },\n  {\n    id: \"4\",\n    icon: FileText,\n    title: \"Weekly Summary\",\n    description: \"Generate this week's performance report\",\n    color: \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\",\n    action: \"Generate weekly summary\"\n  },\n  {\n    id: \"5\",\n    icon: Calendar,\n    title: \"Meeting Prep\",\n    description: \"3 meetings tomorrow need preparation\",\n    color: \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400\",\n    action: \"Prepare meetings\"\n  },\n  {\n    id: \"6\",\n    icon: Mail,\n    title: \"Email Templates\",\n    description: \"Generate personalized follow-up emails\",\n    color: \"bg-indigo-100 text-indigo-700 dark:bg-indigo-900/20 dark:text-indigo-400\",\n    action: \"Create email templates\"\n  }\n];\n\nexport default function AIAssistant() {\n  const { theme, toggleTheme } = useTheme();\n  const [messages, setMessages] = useState(mockMessages);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [waveform, setWaveform] = useState(Array(20).fill(0));\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Simulate waveform animation when listening\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isListening) {\n      interval = setInterval(() => {\n        setWaveform(prev => prev.map(() => Math.random() * 100));\n      }, 150);\n    } else {\n      setWaveform(Array(20).fill(0));\n    }\n    return () => clearInterval(interval);\n  }, [isListening]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const newUserMessage = {\n      id: Date.now().toString(),\n      type: \"user\" as const,\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, newUserMessage]);\n    setInputMessage(\"\");\n    setIsTyping(true);\n\n    // Simulate AI response\n    setTimeout(() => {\n      const aiResponse = {\n        id: (Date.now() + 1).toString(),\n        type: \"ai\" as const,\n        content: generateAIResponse(inputMessage),\n        timestamp: new Date(),\n        suggestions: [\"Follow up\", \"Schedule meeting\", \"Generate report\"]\n      };\n      setMessages(prev => [...prev, aiResponse]);\n      setIsTyping(false);\n    }, 2000);\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputMessage(suggestion);\n    inputRef.current?.focus();\n  };\n\n  const handleContextClick = (action: string) => {\n    setInputMessage(action);\n    inputRef.current?.focus();\n  };\n\n  const toggleListening = () => {\n    setIsListening(!isListening);\n  };\n\n  const toggleSpeaking = () => {\n    setIsSpeaking(!isSpeaking);\n  };\n\n  const generateAIResponse = (input: string) => {\n    const responses = [\n      `I've analyzed your request: \"${input}\". Let me provide some insights based on your current pipeline data...`,\n      `Based on your sales data, here's what I found regarding \"${input}\". Would you like me to take any specific actions?`,\n      `Great question! I've processed \"${input}\" and here are my recommendations based on your current lead status and campaign performance.`\n    ];\n    return responses[Math.floor(Math.random() * responses.length)];\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\" data-testid=\"ai-assistant\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"ml-4 lg:ml-0\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white flex items-center gap-3\">\n                <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg\">\n                  <Bot className=\"h-6 w-6 text-white\" />\n                </div>\n                AI Sales Assistant\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Your intelligent sales automation partner\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Badge variant=\"outline\" className=\"text-green-600 border-green-200 bg-green-50 dark:bg-green-900/20\">\n              <Activity className=\"h-3 w-3 mr-1\" />\n              Active\n            </Badge>\n            <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme} className=\"p-2\">\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Main Chat Panel (70%) */}\n        <div className=\"flex-1 flex flex-col bg-slate-50 dark:bg-slate-900\">\n          {/* Chat Messages */}\n          <ScrollArea className=\"flex-1 p-6\">\n            <div className=\"space-y-6 max-w-4xl mx-auto\">\n              {messages.map((message) => (\n                <div key={message.id} className={`flex items-start space-x-4 ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>\n                  <Avatar className=\"h-10 w-10 shrink-0\">\n                    <AvatarFallback className={message.type === 'ai' ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white' : 'bg-slate-100 dark:bg-slate-700'}>\n                      {message.type === 'ai' ? <Bot className=\"h-5 w-5\" /> : <User className=\"h-5 w-5\" />}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className={`flex-1 max-w-[80%] ${message.type === 'user' ? 'text-right' : ''}`}>\n                    <div className={`rounded-lg p-4 ${\n                      message.type === 'ai' \n                        ? 'bg-white dark:bg-slate-800 shadow-sm border border-slate-200 dark:border-slate-700' \n                        : 'bg-blue-600 text-white ml-auto inline-block'\n                    }`}>\n                      <p className=\"text-sm leading-relaxed whitespace-pre-line\">\n                        {message.content}\n                      </p>\n                      \n                      {/* AI Message Suggestions */}\n                      {message.type === 'ai' && message.suggestions && (\n                        <div className=\"flex flex-wrap gap-2 mt-3 pt-3 border-t border-slate-200 dark:border-slate-600\">\n                          {message.suggestions.map((suggestion, index) => (\n                            <Button\n                              key={index}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleSuggestionClick(suggestion)}\n                              className=\"text-xs\"\n                            >\n                              {suggestion}\n                            </Button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <p className=\"text-xs text-slate-500 mt-2\">\n                      {format(message.timestamp, \"h:mm a\")}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              \n              {/* Typing Indicator */}\n              {isTyping && (\n                <div className=\"flex items-start space-x-4\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n                      <Bot className=\"h-5 w-5\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"bg-white dark:bg-slate-800 rounded-lg p-4 shadow-sm border border-slate-200 dark:border-slate-700\">\n                    <div className=\"flex space-x-2\">\n                      <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                      <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div ref={messagesEndRef} />\n            </div>\n          </ScrollArea>\n\n          {/* Chat Input */}\n          <div className=\"border-t border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800 p-4\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-1 relative\">\n                  <Input\n                    ref={inputRef}\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                    placeholder=\"Ask me anything about your sales pipeline...\"\n                    className=\"pr-12 bg-slate-50 dark:bg-slate-900 border-slate-200 dark:border-slate-700\"\n                    data-testid=\"chat-input\"\n                  />\n                  <Button\n                    size=\"sm\"\n                    onClick={handleSendMessage}\n                    disabled={!inputMessage.trim()}\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                    data-testid=\"send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Voice Interaction Panel */}\n          <div className=\"border-t border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-100 to-slate-50 dark:from-slate-800 dark:to-slate-900 p-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white flex items-center gap-2\">\n                  <Mic className=\"h-5 w-5\" />\n                  Voice Assistant\n                </h3>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant={isSpeaking ? \"default\" : \"secondary\"} className=\"text-xs\">\n                    {isSpeaking ? \"Speaking\" : \"Ready\"}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-center space-x-6\">\n                {/* Waveform Visualization */}\n                <div className=\"flex-1 max-w-md\">\n                  <div className=\"flex items-end justify-center space-x-1 h-16 bg-white dark:bg-slate-800 rounded-lg p-4 border border-slate-200 dark:border-slate-700\">\n                    {waveform.map((height, index) => (\n                      <div\n                        key={index}\n                        className={`w-2 rounded-full transition-all duration-150 ${\n                          isListening ? 'bg-blue-500' : 'bg-slate-300 dark:bg-slate-600'\n                        }`}\n                        style={{ \n                          height: isListening ? `${Math.max(height, 10)}%` : '10%',\n                        }}\n                      />\n                    ))}\n                  </div>\n                </div>\n\n                {/* Voice Controls */}\n                <div className=\"flex space-x-3\">\n                  <Button\n                    size=\"lg\"\n                    variant={isListening ? \"default\" : \"outline\"}\n                    onClick={toggleListening}\n                    className={`h-16 w-16 rounded-full ${\n                      isListening \n                        ? 'bg-red-500 hover:bg-red-600 text-white animate-pulse' \n                        : 'bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600'\n                    }`}\n                    data-testid=\"voice-input-toggle\"\n                  >\n                    {isListening ? <MicOff className=\"h-6 w-6\" /> : <Mic className=\"h-6 w-6\" />}\n                  </Button>\n\n                  <Button\n                    size=\"lg\"\n                    variant={isSpeaking ? \"default\" : \"outline\"}\n                    onClick={toggleSpeaking}\n                    className=\"h-16 w-16 rounded-full\"\n                    data-testid=\"voice-output-toggle\"\n                  >\n                    {isSpeaking ? <VolumeX className=\"h-6 w-6\" /> : <Volume2 className=\"h-6 w-6\" />}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Voice Status */}\n              <div className=\"text-center mt-4\">\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  {isListening \n                    ? \"🎤 Listening... Speak now\" \n                    : isSpeaking \n                    ? \"🔊 AI is speaking...\" \n                    : \"Click the microphone to start voice interaction\"\n                  }\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Context Suggestions Sidebar (30%) */}\n        <div className=\"w-96 bg-white dark:bg-slate-800 border-l border-slate-200 dark:border-slate-700 flex flex-col\">\n          <div className=\"p-6 border-b border-slate-200 dark:border-slate-700\">\n            <h2 className=\"text-lg font-semibold text-slate-900 dark:text-white flex items-center gap-2\">\n              <Lightbulb className=\"h-5 w-5\" />\n              Quick Actions\n            </h2>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n              Context-aware suggestions based on your data\n            </p>\n          </div>\n\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-4 space-y-3\">\n              {contextSuggestions.map((suggestion) => (\n                <Card \n                  key={suggestion.id} \n                  className=\"cursor-pointer hover:shadow-md transition-shadow group\"\n                  onClick={() => handleContextClick(suggestion.action)}\n                  data-testid={`context-suggestion-${suggestion.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`p-2 rounded-lg ${suggestion.color} group-hover:scale-110 transition-transform`}>\n                        <suggestion.icon className=\"h-4 w-4\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-medium text-slate-900 dark:text-white text-sm leading-tight\">\n                          {suggestion.title}\n                        </h3>\n                        <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1 leading-relaxed\">\n                          {suggestion.description}\n                        </p>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"mt-2 h-6 px-2 text-xs group-hover:bg-slate-100 dark:group-hover:bg-slate-700\"\n                        >\n                          <Zap className=\"h-3 w-3 mr-1\" />\n                          Quick Ask\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18692},"client/src/pages/airtable-test.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, AlertCircle, RefreshCw } from \"lucide-react\";\n\ninterface TestResult {\n  status: \"success\" | \"error\";\n  message: string;\n  statusCode?: number;\n  details?: string;\n  hasApiKey?: boolean;\n  hasBaseId?: boolean;\n  recordCount?: number;\n  sampleRecord?: any;\n}\n\nexport default function AirtableTest() {\n  const { data: testResult, isLoading, refetch, error } = useQuery<TestResult>({\n    queryKey: [\"/api/test-airtable\"],\n    retry: false\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"success\":\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case \"error\":\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"success\":\n        return <Badge className=\"bg-green-100 text-green-800\">Connected</Badge>;\n      case \"error\":\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 overflow-y-auto p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-2xl font-bold mb-6\">Airtable Connection Test</h1>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <RefreshCw className=\"h-5 w-5 animate-spin text-blue-500\" />\n                <span>Testing Airtable connection...</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-8\" data-testid=\"airtable-test\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold\">Airtable Connection Test</h1>\n          <Button onClick={() => refetch()} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Test Again\n          </Button>\n        </div>\n\n        {error && (\n          <Card className=\"mb-6 border-red-200\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-red-700\">\n                <XCircle className=\"h-5 w-5\" />\n                <span>Connection Error</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-red-600\">\n                {error instanceof Error ? error.message : \"Failed to test connection\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {testResult && (\n          <div className=\"space-y-6\">\n            {/* Connection Status */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getStatusIcon(testResult.status)}\n                    <span>Connection Status</span>\n                  </div>\n                  {getStatusBadge(testResult.status)}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-4\">{testResult.message}</p>\n                \n                {testResult.hasApiKey !== undefined && (\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      {testResult.hasApiKey ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4 text-red-500\" />\n                      )}\n                      <span>AIRTABLE_API_KEY</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {testResult.hasBaseId ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4 text-red-500\" />\n                      )}\n                      <span>AIRTABLE_BASE_ID</span>\n                    </div>\n                  </div>\n                )}\n\n                {testResult.statusCode && (\n                  <div className=\"mt-4 p-3 bg-gray-50 rounded\">\n                    <p className=\"text-sm\">\n                      <strong>HTTP Status:</strong> {testResult.statusCode}\n                    </p>\n                    {testResult.details && (\n                      <p className=\"text-sm mt-1\">\n                        <strong>Details:</strong> {testResult.details}\n                      </p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Success Details */}\n            {testResult.status === \"success\" && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Table Access Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <span className=\"font-medium\">Records Found: </span>\n                      <Badge variant=\"outline\">{testResult.recordCount || 0}</Badge>\n                    </div>\n                    \n                    {testResult.sampleRecord && (\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Sample Record Fields:</h4>\n                        <div className=\"bg-gray-50 p-3 rounded text-sm\">\n                          <pre className=\"whitespace-pre-wrap\">\n                            {JSON.stringify(testResult.sampleRecord.fields, null, 2)}\n                          </pre>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Error Troubleshooting */}\n            {testResult.status === \"error\" && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Troubleshooting</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 text-sm\">\n                    {testResult.statusCode === 403 && (\n                      <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded\">\n                        <h4 className=\"font-medium text-yellow-800\">403 Forbidden Error</h4>\n                        <p className=\"text-yellow-700 mt-1\">\n                          Your API token doesn't have permission to access this base or table. Please:\n                        </p>\n                        <ul className=\"list-disc list-inside mt-2 text-yellow-700\">\n                          <li>Check that your API token has 'data.records:read' permission</li>\n                          <li>Verify the token was created for the correct base</li>\n                          <li>Ensure the table name 'L1 - Enriched Leads' exists in your base</li>\n                        </ul>\n                      </div>\n                    )}\n                    \n                    {testResult.statusCode === 401 && (\n                      <div className=\"p-3 bg-red-50 border border-red-200 rounded\">\n                        <h4 className=\"font-medium text-red-800\">401 Unauthorized Error</h4>\n                        <p className=\"text-red-700 mt-1\">\n                          Your API token is invalid or expired. Please generate a new token.\n                        </p>\n                      </div>\n                    )}\n\n                    {testResult.statusCode === 404 && (\n                      <div className=\"p-3 bg-blue-50 border border-blue-200 rounded\">\n                        <h4 className=\"font-medium text-blue-800\">404 Not Found Error</h4>\n                        <p className=\"text-blue-700 mt-1\">\n                          The base ID or table name is incorrect. Please verify:\n                        </p>\n                        <ul className=\"list-disc list-inside mt-2 text-blue-700\">\n                          <li>Base ID is correct (starts with 'app')</li>\n                          <li>Table name is exactly 'L1 - Enriched Leads'</li>\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8784},"client/src/pages/analytics-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { MetricsGrid } from \"@/components/dashboard/metrics-grid\";\nimport { PipelineChart } from \"@/components/dashboard/pipeline-chart\";\nimport { SystemStats } from \"@/components/dashboard/system-stats\";\nimport { RecentActivities } from \"@/components/dashboard/recent-activities\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\nexport default function AnalyticsOverview() {\n  const { theme, toggleTheme } = useTheme();\n  \n  const { data: metrics, isLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  if (isLoading || !metrics) {\n    return (\n      <div className=\"flex-1 overflow-y-auto\">\n        <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\" data-testid=\"mobile-menu-button\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"ml-4 lg:ml-0\">\n                <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\">Analytics Overview</h1>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">Monitor your AI automation performance</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleTheme}\n                className=\"p-2\"\n                data-testid=\"theme-toggle\"\n              >\n                {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n              </Button>\n              <div className=\"flex items-center space-x-2\" data-testid=\"system-status\">\n                <div className=\"w-2 h-2 bg-emerald-500 rounded-full animate-pulse\" />\n                <span className=\"text-sm text-emerald-600 dark:text-emerald-400 font-medium\">AI System Active</span>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"space-y-8 animate-pulse\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-white dark:bg-slate-800 rounded-xl h-32 border border-slate-200 dark:border-slate-700\" />\n              ))}\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 bg-white dark:bg-slate-800 rounded-xl h-96 border border-slate-200 dark:border-slate-700\" />\n              <div className=\"bg-white dark:bg-slate-800 rounded-xl h-96 border border-slate-200 dark:border-slate-700\" />\n            </div>\n            <div className=\"bg-white dark:bg-slate-800 rounded-xl h-64 border border-slate-200 dark:border-slate-700\" />\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\" data-testid=\"analytics-overview\">\n      {/* Top header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\" data-testid=\"dashboard-header\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\" data-testid=\"mobile-menu-button\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"ml-4 lg:ml-0\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"page-title\">\n                Analytics Overview\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\" data-testid=\"page-subtitle\">\n                Monitor your AI automation performance\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className=\"p-2\"\n              data-testid=\"theme-toggle\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            {/* Status Indicator */}\n            <div className=\"flex items-center space-x-2\" data-testid=\"system-status\">\n              <div className=\"w-2 h-2 bg-emerald-500 rounded-full animate-pulse\" />\n              <span className=\"text-sm text-emerald-600 dark:text-emerald-400 font-medium\">AI System Active</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Dashboard Content */}\n      <main className=\"px-4 py-6 sm:px-6 lg:px-8\" data-testid=\"dashboard-content\">\n        {/* Key Metrics Cards */}\n        <MetricsGrid metrics={metrics} />\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n          {/* Pipeline Chart */}\n          <PipelineChart metrics={metrics} />\n\n          {/* Key System Stats */}\n          <SystemStats metrics={metrics} />\n        </div>\n\n        {/* Recent Activities */}\n        <RecentActivities />\n      </main>\n    </div>\n  );\n}\n","size_bytes":5561},"client/src/pages/automation-control.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Play, \n  Pause, \n  Settings, \n  Zap, \n  ArrowRight, \n  Clock, \n  Filter,\n  Plus,\n  Activity,\n  Bot,\n  Phone,\n  Mail,\n  Calendar,\n  Target,\n  Users,\n  TrendingUp,\n  Database,\n  Workflow,\n  Timer,\n  RotateCcw,\n  Eye,\n  Edit,\n  Sun,\n  Moon,\n  RefreshCw\n} from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { format } from \"date-fns\";\n\n// Mock automation data\nconst mockAutomations = [\n  {\n    id: \"auto-001\",\n    name: \"Lead Enrichment → AI Call → Meeting Booking\",\n    purpose: \"Qualify new leads and book meetings automatically\",\n    status: \"active\" as const,\n    lastExecuted: new Date(Date.now() - 1000 * 60 * 15),\n    nextRun: new Date(Date.now() + 1000 * 60 * 30),\n    runsToday: 24,\n    successRate: 85,\n    totalProcessed: 342,\n    category: \"Lead Processing\",\n    triggers: [\"New lead added\", \"Lead status changed to 'Warm'\"],\n    steps: [\"Lead Enrichment\", \"AI Phone Call\", \"Meeting Booking\", \"CRM Update\"],\n    icon: Target,\n    color: \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\"\n  },\n  {\n    id: \"auto-002\", \n    name: \"Cold Lead Re-engagement Campaign\",\n    purpose: \"Re-activate cold leads through personalized nurture sequences\",\n    status: \"active\" as const,\n    lastExecuted: new Date(Date.now() - 1000 * 60 * 5),\n    nextRun: new Date(Date.now() + 1000 * 60 * 60 * 2),\n    runsToday: 12,\n    successRate: 67,\n    totalProcessed: 128,\n    category: \"Nurturing\",\n    triggers: [\"Lead inactive for 30 days\", \"Scheduled interval\"],\n    steps: [\"Lead Segmentation\", \"Content Generation\", \"Email Campaign\", \"Follow-up Tracking\"],\n    icon: Mail,\n    color: \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\"\n  },\n  {\n    id: \"auto-003\",\n    name: \"Meeting Follow-up & Proposal Generation\", \n    purpose: \"Generate personalized proposals after completed meetings\",\n    status: \"paused\" as const,\n    lastExecuted: new Date(Date.now() - 1000 * 60 * 60 * 3),\n    nextRun: null,\n    runsToday: 8,\n    successRate: 92,\n    totalProcessed: 67,\n    category: \"Post-Meeting\",\n    triggers: [\"Meeting marked as 'Completed'\", \"Manual trigger\"],\n    steps: [\"Meeting Summary\", \"Proposal Generation\", \"Document Creation\", \"Email Delivery\"],\n    icon: Calendar,\n    color: \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400\"\n  },\n  {\n    id: \"auto-004\",\n    name: \"Hot Lead Priority Notification\",\n    purpose: \"Immediately notify sales team when leads become hot\",\n    status: \"active\" as const,\n    lastExecuted: new Date(Date.now() - 1000 * 60 * 2),\n    nextRun: new Date(Date.now() + 1000 * 60 * 5),\n    runsToday: 18,\n    successRate: 100,\n    totalProcessed: 45,\n    category: \"Notifications\",\n    triggers: [\"Lead score > 80\", \"High engagement detected\"],\n    steps: [\"Score Analysis\", \"Team Notification\", \"Calendar Booking\", \"Priority Tagging\"],\n    icon: Zap,\n    color: \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\"\n  },\n  {\n    id: \"auto-005\",\n    name: \"Weekly Performance Report Generator\",\n    purpose: \"Generate comprehensive sales performance analytics\",\n    status: \"active\" as const,\n    lastExecuted: new Date(Date.now() - 1000 * 60 * 60 * 24),\n    nextRun: new Date(Date.now() + 1000 * 60 * 60 * 24 * 6),\n    runsToday: 1,\n    successRate: 100,\n    totalProcessed: 8,\n    category: \"Reporting\",\n    triggers: [\"Weekly schedule\", \"Month-end trigger\"],\n    steps: [\"Data Collection\", \"Analysis Processing\", \"Report Generation\", \"Distribution\"],\n    icon: TrendingUp,\n    color: \"bg-indigo-100 text-indigo-700 dark:bg-indigo-900/20 dark:text-indigo-400\"\n  },\n  {\n    id: \"auto-006\",\n    name: \"Data Sync & Lead Scoring Update\",\n    purpose: \"Keep all systems synchronized with latest lead data\",\n    status: \"active\" as const,\n    lastExecuted: new Date(Date.now() - 1000 * 60 * 10),\n    nextRun: new Date(Date.now() + 1000 * 60 * 20),\n    runsToday: 48,\n    successRate: 98,\n    totalProcessed: 1247,\n    category: \"Data Management\",\n    triggers: [\"Every 30 minutes\", \"Data change detected\"],\n    steps: [\"Data Extraction\", \"Lead Scoring\", \"CRM Update\", \"Validation Check\"],\n    icon: Database,\n    color: \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\"\n  }\n];\n\nconst flowConnections = [\n  { from: \"Lead Database\", to: \"Lead Enrichment\", active: true },\n  { from: \"Lead Enrichment\", to: \"AI Voice Call\", active: true },\n  { from: \"AI Voice Call\", to: \"Meeting Booking\", active: true },\n  { from: \"Meeting Booking\", to: \"CRM Update\", active: false },\n  { from: \"Lead Database\", to: \"Lead Scoring\", active: true },\n  { from: \"Lead Scoring\", to: \"Nurture Campaign\", active: true },\n  { from: \"Nurture Campaign\", to: \"Follow-up Tracking\", active: true },\n  { from: \"Meeting Booking\", to: \"Proposal Generation\", active: false },\n  { from: \"Proposal Generation\", to: \"Email Delivery\", active: false }\n];\n\nconst mockTriggerConditions = [\n  { field: \"Lead Status\", operator: \"equals\", value: \"Warm\" },\n  { field: \"Last Contact\", operator: \"older_than\", value: \"7 days\" },\n  { field: \"Lead Score\", operator: \"greater_than\", value: \"80\" }\n];\n\nexport default function AutomationControl() {\n  const { theme, toggleTheme } = useTheme();\n  const [automations, setAutomations] = useState(mockAutomations);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedAutomation, setSelectedAutomation] = useState<string | null>(null);\n  const [isFlowView, setIsFlowView] = useState(false);\n\n  const toggleAutomation = (id: string) => {\n    setAutomations(prev => prev.map(automation => \n      automation.id === id \n        ? { ...automation, status: automation.status === 'active' ? 'paused' as const : 'active' as const }\n        : automation\n    ));\n  };\n\n  const runAutomation = (id: string) => {\n    setAutomations(prev => prev.map(automation => \n      automation.id === id \n        ? { \n            ...automation, \n            lastExecuted: new Date(),\n            runsToday: automation.runsToday + 1,\n            totalProcessed: automation.totalProcessed + 1\n          }\n        : automation\n    ));\n  };\n\n  const filteredAutomations = selectedCategory === \"all\" \n    ? automations \n    : automations.filter(auto => auto.category.toLowerCase() === selectedCategory.toLowerCase());\n\n  const categories = [\"all\", ...Array.from(new Set(automations.map(a => a.category)))];\n  const activeCount = automations.filter(a => a.status === 'active').length;\n  const totalRuns = automations.reduce((sum, a) => sum + a.runsToday, 0);\n  const avgSuccessRate = Math.round(automations.reduce((sum, a) => sum + a.successRate, 0) / automations.length);\n\n  return (\n    <div className=\"flex-1 overflow-hidden\" data-testid=\"automation-control\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white flex items-center gap-3\">\n              <div className=\"p-2 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-lg\">\n                <Bot className=\"h-6 w-6 text-white\" />\n              </div>\n              Automation Control Center\n            </h1>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Mission control for your AI automation workflows\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"hidden sm:flex items-center space-x-4\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{activeCount}</p>\n                <p className=\"text-xs text-slate-500\">Active</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{totalRuns}</p>\n                <p className=\"text-xs text-slate-500\">Runs Today</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{avgSuccessRate}%</p>\n                <p className=\"text-xs text-slate-500\">Success Rate</p>\n              </div>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme}>\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"h-[calc(100vh-80px)] bg-slate-50 dark:bg-slate-900\">\n        <Tabs defaultValue=\"dashboard\" className=\"h-full flex flex-col\">\n          <div className=\"px-6 py-4 bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700\">\n            <TabsList className=\"grid grid-cols-3 w-full max-w-md\">\n              <TabsTrigger value=\"dashboard\">Status Board</TabsTrigger>\n              <TabsTrigger value=\"flows\">Flow Visualizer</TabsTrigger>\n              <TabsTrigger value=\"triggers\">Triggers & Rules</TabsTrigger>\n            </TabsList>\n          </div>\n\n          <div className=\"flex-1 overflow-hidden\">\n            {/* Status Board */}\n            <TabsContent value=\"dashboard\" className=\"h-full overflow-auto p-6\">\n              {/* Filters */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Filter by category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map(category => (\n                        <SelectItem key={category} value={category}>\n                          {category === \"all\" ? \"All Categories\" : category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Advanced Filters\n                  </Button>\n                </div>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Automation\n                </Button>\n              </div>\n\n              {/* Automation Cards Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {filteredAutomations.map((automation) => (\n                  <Card key={automation.id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`p-2 rounded-lg ${automation.color}`}>\n                            <automation.icon className=\"h-5 w-5\" />\n                          </div>\n                          <div>\n                            <Badge variant=\"outline\" className=\"text-xs mb-2\">\n                              {automation.category}\n                            </Badge>\n                            <CardTitle className=\"text-lg font-semibold leading-tight\">\n                              {automation.name}\n                            </CardTitle>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge \n                            variant={automation.status === 'active' ? 'default' : 'secondary'}\n                            className=\"text-xs\"\n                          >\n                            {automation.status === 'active' ? '✅ Active' : '⏸ Paused'}\n                          </Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-2\">\n                        {automation.purpose}\n                      </p>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      {/* Stats */}\n                      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-lg font-bold text-slate-900 dark:text-white\">\n                            {automation.runsToday}\n                          </p>\n                          <p className=\"text-xs text-slate-500\">Runs Today</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-lg font-bold text-green-600\">\n                            {automation.successRate}%\n                          </p>\n                          <p className=\"text-xs text-slate-500\">Success Rate</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-lg font-bold text-slate-900 dark:text-white\">\n                            {automation.totalProcessed}\n                          </p>\n                          <p className=\"text-xs text-slate-500\">Total Processed</p>\n                        </div>\n                      </div>\n\n                      {/* Timing Info */}\n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-slate-500\">Last executed:</span>\n                          <span className=\"font-medium\">\n                            {format(automation.lastExecuted, \"MMM d, h:mm a\")}\n                          </span>\n                        </div>\n                        {automation.nextRun && (\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-slate-500\">Next run:</span>\n                            <span className=\"font-medium text-blue-600\">\n                              {format(automation.nextRun, \"MMM d, h:mm a\")}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Controls */}\n                      <div className=\"flex items-center justify-between pt-3 border-t border-slate-200 dark:border-slate-700\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Switch\n                            checked={automation.status === 'active'}\n                            onCheckedChange={() => toggleAutomation(automation.id)}\n                          />\n                          <Label className=\"text-sm\">\n                            {automation.status === 'active' ? 'Active' : 'Paused'}\n                          </Label>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => runAutomation(automation.id)}\n                            disabled={automation.status === 'paused'}\n                          >\n                            <Play className=\"h-3 w-3 mr-1\" />\n                            Run Now\n                          </Button>\n                          \n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"ghost\">\n                                <Settings className=\"h-3 w-3\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>Automation Settings</DialogTitle>\n                              </DialogHeader>\n                              <AutomationSettings automation={automation} />\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            {/* Flow Visualizer */}\n            <TabsContent value=\"flows\" className=\"h-full overflow-auto p-6\">\n              <div className=\"max-w-6xl mx-auto\">\n                <div className=\"mb-6\">\n                  <h2 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-2\">\n                    Automation Flow Map\n                  </h2>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                    Visual representation of how your automations connect and flow data\n                  </p>\n                </div>\n\n                <div className=\"bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 p-8\">\n                  <FlowVisualizer connections={flowConnections} />\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Triggers & Rules */}\n            <TabsContent value=\"triggers\" className=\"h-full overflow-auto p-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-6\">\n                  <h2 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-2\">\n                    Trigger & Rule Management\n                  </h2>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                    Configure when and how your automations should execute\n                  </p>\n                </div>\n\n                <TriggerRuleEditor automations={automations} />\n              </div>\n            </TabsContent>\n          </div>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n// Automation Settings Component\nfunction AutomationSettings({ automation }: { automation: typeof mockAutomations[0] }) {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-medium mb-4\">Automation Steps</h3>\n        <div className=\"space-y-3\">\n          {automation.steps.map((step, index) => (\n            <div key={index} className=\"flex items-center space-x-3 p-3 bg-slate-50 dark:bg-slate-900 rounded-lg\">\n              <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 rounded-full flex items-center justify-center text-xs font-medium\">\n                {index + 1}\n              </div>\n              <span className=\"font-medium\">{step}</span>\n              {index < automation.steps.length - 1 && (\n                <ArrowRight className=\"h-4 w-4 text-slate-400 ml-auto\" />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <Separator />\n      \n      <div>\n        <h3 className=\"text-lg font-medium mb-4\">Trigger Conditions</h3>\n        <div className=\"space-y-2\">\n          {automation.triggers.map((trigger, index) => (\n            <div key={index} className=\"flex items-center space-x-2 text-sm\">\n              <Zap className=\"h-4 w-4 text-amber-500\" />\n              <span>{trigger}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Flow Visualizer Component\nfunction FlowVisualizer({ connections }: { connections: typeof flowConnections }) {\n  const nodes = Array.from(new Set([...connections.map(c => c.from), ...connections.map(c => c.to)]));\n  \n  return (\n    <div className=\"relative\">\n      <div className=\"grid grid-cols-4 gap-8 items-center\">\n        {/* Input Layer */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-center text-slate-700 dark:text-slate-300\">Input Sources</h4>\n          <div className=\"space-y-3\">\n            <FlowNode name=\"Lead Database\" type=\"source\" active={true} />\n            <FlowNode name=\"CRM System\" type=\"source\" active={true} />\n          </div>\n        </div>\n\n        {/* Processing Layer */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-center text-slate-700 dark:text-slate-300\">Processing</h4>\n          <div className=\"space-y-3\">\n            <FlowNode name=\"Lead Enrichment\" type=\"process\" active={true} />\n            <FlowNode name=\"Lead Scoring\" type=\"process\" active={true} />\n            <FlowNode name=\"AI Voice Call\" type=\"process\" active={true} />\n          </div>\n        </div>\n\n        {/* Action Layer */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-center text-slate-700 dark:text-slate-300\">Actions</h4>\n          <div className=\"space-y-3\">\n            <FlowNode name=\"Meeting Booking\" type=\"action\" active={true} />\n            <FlowNode name=\"Nurture Campaign\" type=\"action\" active={true} />\n            <FlowNode name=\"Follow-up Tracking\" type=\"action\" active={true} />\n          </div>\n        </div>\n\n        {/* Output Layer */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-center text-slate-700 dark:text-slate-300\">Outputs</h4>\n          <div className=\"space-y-3\">\n            <FlowNode name=\"CRM Update\" type=\"output\" active={false} />\n            <FlowNode name=\"Email Delivery\" type=\"output\" active={false} />\n            <FlowNode name=\"Proposal Generation\" type=\"output\" active={false} />\n          </div>\n        </div>\n      </div>\n\n      {/* Connection Lines */}\n      <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n        {connections.map((connection, index) => (\n          <line\n            key={index}\n            x1=\"25%\" y1=\"50%\" x2=\"75%\" y2=\"50%\"\n            stroke={connection.active ? \"#3b82f6\" : \"#cbd5e1\"}\n            strokeWidth=\"2\"\n            strokeDasharray={connection.active ? \"none\" : \"5,5\"}\n            className={connection.active ? \"animate-pulse\" : \"\"}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n}\n\nfunction FlowNode({ name, type, active }: { name: string; type: string; active: boolean }) {\n  const getIcon = () => {\n    switch (type) {\n      case 'source': return <Database className=\"h-4 w-4\" />;\n      case 'process': return <Bot className=\"h-4 w-4\" />;\n      case 'action': return <Zap className=\"h-4 w-4\" />;\n      case 'output': return <Target className=\"h-4 w-4\" />;\n      default: return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className={`\n      p-3 rounded-lg border text-center cursor-pointer transition-all hover:scale-105\n      ${active \n        ? 'bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800' \n        : 'bg-slate-50 border-slate-200 dark:bg-slate-800 dark:border-slate-700'\n      }\n    `}>\n      <div className={`\n        mx-auto mb-2 p-2 rounded-full w-fit\n        ${active \n          ? 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400' \n          : 'bg-slate-100 text-slate-500 dark:bg-slate-700 dark:text-slate-400'\n        }\n      `}>\n        {getIcon()}\n      </div>\n      <p className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">{name}</p>\n      {active && (\n        <div className=\"mt-2 w-2 h-2 bg-green-400 rounded-full mx-auto animate-pulse\" />\n      )}\n    </div>\n  );\n}\n\n// Trigger Rule Editor Component\nfunction TriggerRuleEditor({ automations }: { automations: typeof mockAutomations }) {\n  const [selectedAutomation, setSelectedAutomation] = useState(automations[0].id);\n  const selectedAuto = automations.find(a => a.id === selectedAutomation);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Automation Selector */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Select Automation to Configure</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedAutomation} onValueChange={setSelectedAutomation}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {automations.map(automation => (\n                <SelectItem key={automation.id} value={automation.id}>\n                  {automation.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Trigger Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Trigger Settings</CardTitle>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Configure when this automation should execute\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Trigger Type</Label>\n              <Select defaultValue=\"event\">\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"event\">Event-based</SelectItem>\n                  <SelectItem value=\"schedule\">Scheduled</SelectItem>\n                  <SelectItem value=\"manual\">Manual only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Execution Schedule</Label>\n              <Select defaultValue=\"realtime\">\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"realtime\">Real-time</SelectItem>\n                  <SelectItem value=\"hourly\">Every hour</SelectItem>\n                  <SelectItem value=\"daily\">Daily</SelectItem>\n                  <SelectItem value=\"weekly\">Weekly</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Rule Conditions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Rule Conditions</CardTitle>\n          <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n            Define the conditions that must be met for this automation to run\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {mockTriggerConditions.map((condition, index) => (\n              <div key={index} className=\"flex items-center space-x-4 p-3 bg-slate-50 dark:bg-slate-900 rounded-lg\">\n                <Select defaultValue={condition.field}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Lead Status\">Lead Status</SelectItem>\n                    <SelectItem value=\"Lead Score\">Lead Score</SelectItem>\n                    <SelectItem value=\"Last Contact\">Last Contact</SelectItem>\n                    <SelectItem value=\"Email Engagement\">Email Engagement</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select defaultValue={condition.operator}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"equals\">equals</SelectItem>\n                    <SelectItem value=\"greater_than\">greater than</SelectItem>\n                    <SelectItem value=\"less_than\">less than</SelectItem>\n                    <SelectItem value=\"older_than\">older than</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Input \n                  defaultValue={condition.value}\n                  className=\"flex-1\"\n                  placeholder=\"Value\"\n                />\n\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n\n            <Button variant=\"outline\" className=\"w-full\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Condition\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":28764},"client/src/pages/lead-insights.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Search, \n  Filter, \n  MoreVertical, \n  Phone, \n  Mail, \n  Building, \n  Calendar, \n  DollarSign,\n  Star,\n  Clock,\n  User,\n  Menu,\n  Moon,\n  Sun\n} from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport type { Lead } from \"@shared/schema\";\n\nexport default function LeadInsights() {\n  const { theme, toggleTheme } = useTheme();\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const queryClient = useQueryClient();\n\n  const { data: leads, isLoading, refetch } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n    refetchInterval: 30000, // Refresh every 30 seconds for real-time updates\n  });\n\n  const filteredLeads = leads?.filter(lead => \n    lead.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    lead.company?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    lead.email.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  // Select first lead by default\n  if (leads && leads.length > 0 && !selectedLead) {\n    setSelectedLead(leads[0]);\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\":\n        return \"bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300\";\n      case \"contacted\":\n        return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"qualified\":\n        return \"bg-amber-100 text-amber-700 dark:bg-amber-900/20 dark:text-amber-400\";\n      case \"meeting_booked\":\n        return \"bg-emerald-100 text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-400\";\n      case \"closed\":\n        return \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\";\n      case \"lost\":\n        return \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\";\n      default:\n        return \"bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300\";\n    }\n  };\n\n  const getStageColor = (stage: string) => {\n    switch (stage) {\n      case \"lead\":\n        return \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400\";\n      case \"prospect\":\n        return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"opportunity\":\n        return \"bg-emerald-100 text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-400\";\n      case \"deal\":\n        return \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\";\n      default:\n        return \"bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300\";\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"Not available\";\n    return new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }).format(new Date(date));\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 overflow-y-auto\">\n        <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\">\n          <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\" data-testid=\"mobile-menu-button\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"ml-4 lg:ml-0\">\n                <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\">Lead Insights</h1>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">Review and manage your lead pipeline</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className=\"p-2\"\n              data-testid=\"theme-toggle\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"flex h-[calc(100vh-81px)]\">\n          <div className=\"w-80 bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700 animate-pulse\">\n            <div className=\"p-4 space-y-4\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 p-3\">\n                  <div className=\"w-10 h-10 bg-slate-200 dark:bg-slate-700 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-3/4\" />\n                    <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"flex-1 bg-slate-50 dark:bg-slate-900 animate-pulse\">\n            <div className=\"p-8 space-y-6\">\n              <div className=\"h-8 bg-slate-200 dark:bg-slate-700 rounded w-1/3\" />\n              <div className=\"h-64 bg-slate-200 dark:bg-slate-700 rounded\" />\n              <div className=\"h-32 bg-slate-200 dark:bg-slate-700 rounded\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\" data-testid=\"lead-insights\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\" data-testid=\"header\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\" data-testid=\"mobile-menu-button\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"ml-4 lg:ml-0\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"page-title\">\n                Lead Insights\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\" data-testid=\"page-subtitle\">\n                Review and manage your lead pipeline\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleTheme}\n            className=\"p-2\"\n            data-testid=\"theme-toggle\"\n          >\n            {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"flex h-[calc(100vh-81px)]\">\n        {/* Left Sidebar - Leads List */}\n        <div className=\"w-80 bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700 flex flex-col\" data-testid=\"leads-sidebar\">\n          {/* Search and Filters */}\n          <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-slate-900 dark:text-white\" data-testid=\"leads-title\">\n                Leads\n              </h2>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"filter-button\">\n                  <Filter className=\"h-4 w-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"more-options\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search leads...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-input\"\n              />\n            </div>\n\n            <div className=\"mt-3 text-xs text-slate-500 dark:text-slate-400\" data-testid=\"leads-count\">\n              {filteredLeads.length} leads found\n            </div>\n          </div>\n\n          {/* Leads List */}\n          <div className=\"flex-1 overflow-y-auto\" data-testid=\"leads-list\">\n            {filteredLeads.map((lead, index) => (\n              <div\n                key={lead.id}\n                onClick={() => setSelectedLead(lead)}\n                className={`flex items-center space-x-3 p-4 cursor-pointer border-b border-slate-100 dark:border-slate-700 transition-colors ${\n                  selectedLead?.id === lead.id\n                    ? \"bg-primary/5 border-l-2 border-l-primary\"\n                    : \"hover:bg-slate-50 dark:hover:bg-slate-700\"\n                }`}\n                data-testid={`lead-item-${index}`}\n              >\n                <Avatar className=\"h-10 w-10\" data-testid={`lead-avatar-${index}`}>\n                  <AvatarFallback className=\"bg-primary/10 text-primary text-sm font-medium\">\n                    {getInitials(lead.name)}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm font-medium text-slate-900 dark:text-white truncate\" data-testid={`lead-name-${index}`}>\n                      {lead.name}\n                    </p>\n                    {(lead.metadata as any)?.priority === \"high\" && (\n                      <Star className=\"h-3 w-3 text-amber-500 ml-1\" data-testid={`lead-priority-${index}`} />\n                    )}\n                  </div>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate\" data-testid={`lead-company-${index}`}>\n                    {lead.company || \"No company\"}\n                  </p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Badge \n                      variant=\"secondary\" \n                      className={`text-xs ${getStatusColor(lead.status)}`}\n                      data-testid={`lead-status-${index}`}\n                    >\n                      {lead.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Right Side - Lead Details */}\n        <div className=\"flex-1 bg-slate-50 dark:bg-slate-900 overflow-y-auto\" data-testid=\"lead-details\">\n          {selectedLead ? (\n            <div className=\"p-8\" data-testid=\"selected-lead-details\">\n              {/* Lead Header */}\n              <div className=\"flex items-start justify-between mb-8\">\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"h-20 w-20\" data-testid=\"selected-lead-avatar\">\n                    <AvatarFallback className=\"bg-primary/10 text-primary text-xl font-medium\">\n                      {getInitials(selectedLead.name)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white\" data-testid=\"selected-lead-name\">\n                      {selectedLead.name}\n                    </h1>\n                    <p className=\"text-slate-600 dark:text-slate-400\" data-testid=\"selected-lead-company\">\n                      {selectedLead.company || \"No company\"}\n                    </p>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Badge \n                        className={`${getStageColor(selectedLead.stage)}`}\n                        data-testid=\"selected-lead-stage\"\n                      >\n                        {selectedLead.stage}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                <Button variant=\"outline\" data-testid=\"edit-lead-button\">\n                  Edit\n                </Button>\n              </div>\n\n              {/* Lead Information Cards */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n                {/* Contact Information */}\n                <Card className=\"bg-white dark:bg-slate-800\" data-testid=\"contact-info-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg text-slate-900 dark:text-white\">Contact Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-3\" data-testid=\"contact-email\">\n                      <Mail className=\"h-4 w-4 text-slate-400\" />\n                      <span className=\"text-sm text-slate-600 dark:text-slate-400\">Email</span>\n                      <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{selectedLead.email}</span>\n                    </div>\n                    {selectedLead.phone && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"contact-phone\">\n                        <Phone className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Phone</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{selectedLead.phone}</span>\n                      </div>\n                    )}\n                    {selectedLead.company && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"contact-company\">\n                        <Building className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Company</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{selectedLead.company}</span>\n                      </div>\n                    )}\n                    {selectedLead.source && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"contact-source\">\n                        <User className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Source</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{selectedLead.source}</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Lead Details */}\n                <Card className=\"bg-white dark:bg-slate-800\" data-testid=\"lead-details-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-lg text-slate-900 dark:text-white\">Lead Details</CardTitle>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => refetch()}>\n                      Refresh Data\n                    </Button>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {(selectedLead.metadata as any)?.firstName && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"lead-firstname\">\n                        <User className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">First Name</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{(selectedLead.metadata as any).firstName}</span>\n                      </div>\n                    )}\n                    {(selectedLead.metadata as any)?.lastName && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"lead-lastname\">\n                        <User className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Last Name</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{(selectedLead.metadata as any).lastName}</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center space-x-3\" data-testid=\"lead-created\">\n                      <Calendar className=\"h-4 w-4 text-slate-400\" />\n                      <span className=\"text-sm text-slate-600 dark:text-slate-400\">Created</span>\n                      <span className=\"text-sm font-medium text-slate-900 dark:text-white\">\n                        {formatDate(selectedLead.createdAt)}\n                      </span>\n                    </div>\n                    {selectedLead.lastContactedAt && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"lead-last-contacted\">\n                        <Clock className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Last Contacted</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">\n                          {formatDate(selectedLead.lastContactedAt)}\n                        </span>\n                      </div>\n                    )}\n                    {selectedLead.value && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"lead-value\">\n                        <DollarSign className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Potential Value</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">\n                          ${parseFloat(selectedLead.value).toLocaleString()}\n                        </span>\n                      </div>\n                    )}\n                    {(selectedLead.metadata as any)?.priority && (\n                      <div className=\"flex items-center space-x-3\" data-testid=\"lead-priority\">\n                        <Star className=\"h-4 w-4 text-slate-400\" />\n                        <span className=\"text-sm text-slate-600 dark:text-slate-400\">Priority</span>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white capitalize\">\n                          {(selectedLead.metadata as any).priority}\n                        </span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Notes Section */}\n              {selectedLead.notes && (\n                <Card className=\"bg-white dark:bg-slate-800\" data-testid=\"notes-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg text-slate-900 dark:text-white\">Notes</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\" data-testid=\"lead-notes\">\n                      {selectedLead.notes}\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* All Airtable Data - Dynamic Display */}\n              {selectedLead.metadata && Object.keys(selectedLead.metadata).length > 0 && (\n                <Card className=\"bg-white dark:bg-slate-800\" data-testid=\"airtable-data-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg text-slate-900 dark:text-white\">All Airtable Data</CardTitle>\n                    <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n                      Live data from your L1 - Enriched Leads table\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                      {Object.entries(selectedLead.metadata)\n                        .filter(([key, value]) => value !== null && value !== undefined && value !== '')\n                        .map(([key, value]) => (\n                          <div key={key} className=\"flex items-start space-x-3\" data-testid={`metadata-${key}`}>\n                            <div className=\"min-w-0 flex-1\">\n                              <p className=\"text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wide\">\n                                {key.replace(/_/g, ' ')}\n                              </p>\n                              <p className=\"text-sm font-medium text-slate-900 dark:text-white mt-1 break-words\">\n                                {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <User className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-slate-900 dark:text-white mb-2\">No Lead Selected</h3>\n                <p className=\"text-slate-500 dark:text-slate-400\">Select a lead from the list to view details</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21768},"client/src/pages/meetings-view.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Calendar as CalendarIcon, \n  Clock, \n  Search, \n  Filter,\n  Grid3X3,\n  List,\n  Video,\n  Phone,\n  Users,\n  TrendingUp,\n  CheckCircle,\n  XCircle,\n  RotateCcw,\n  Eye,\n  Edit,\n  Sun,\n  Moon,\n  Menu,\n  Building,\n  Mail,\n  User,\n  Target,\n  Lightbulb,\n  FileText,\n  AlertCircle,\n  Star\n} from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { format, isToday, isTomorrow, parseISO } from \"date-fns\";\n\n// Mock meeting data\nconst mockMeetings = [\n  {\n    id: \"1\",\n    date: \"2025-01-14T10:00:00Z\",\n    lead: { name: \"Sarah Chen\", company: \"TechCorp\", avatar: \"SC\", score: \"Hot\" },\n    type: \"Demo Call\",\n    status: \"Scheduled\",\n    duration: 45,\n    agenda: \"Product demo, pricing discussion, technical requirements review\",\n    notes: \"Interested in enterprise features, budget approved for Q1\",\n    insights: [\"Looking for API integration capabilities\", \"Concerned about data security\", \"Timeline: implement by March\"],\n    painPoints: [\"Current solution lacks automation\", \"Manual processes taking 20hrs/week\"],\n    objections: [\"Price point concerns\", \"Integration complexity\"],\n    outcome: null\n  },\n  {\n    id: \"2\", \n    date: \"2025-01-14T14:30:00Z\",\n    lead: { name: \"Mike Johnson\", company: \"DataFlow\", avatar: \"MJ\", score: \"Warm\" },\n    type: \"Discovery Call\",\n    status: \"Scheduled\",\n    duration: 30,\n    agenda: \"Understand current workflow, identify pain points, qualify budget\",\n    notes: \"Mid-size company, growing fast, looking to scale operations\",\n    insights: [\"Team of 50+ people\", \"Annual revenue $10M+\", \"Tech-forward leadership\"],\n    painPoints: [\"Data silos across departments\", \"Reporting takes days instead of hours\"],\n    objections: [\"Need buy-in from CTO\", \"Current contract expires in 6 months\"],\n    outcome: null\n  },\n  {\n    id: \"3\",\n    date: \"2025-01-13T16:00:00Z\",\n    lead: { name: \"Emily Rodriguez\", company: \"CloudSync\", avatar: \"ER\", score: \"Hot\" },\n    type: \"Closing Call\",\n    status: \"Completed\",\n    duration: 60,\n    agenda: \"Final pricing negotiation, contract terms, implementation timeline\",\n    notes: \"Ready to move forward, some concerns about onboarding timeline\",\n    insights: [\"Decision maker present\", \"Budget approved\", \"Urgent need - competitor pressuring\"],\n    painPoints: [\"Losing customers due to slow service\", \"Manual processes causing errors\"],\n    objections: [\"Onboarding timeline too long\", \"Training requirements\"],\n    outcome: \"Deal Won - $50k ARR\"\n  },\n  {\n    id: \"4\",\n    date: \"2025-01-12T11:00:00Z\", \n    lead: { name: \"David Park\", company: \"AI Solutions\", avatar: \"DP\", score: \"Cold\" },\n    type: \"Intro Call\",\n    status: \"No-Show\",\n    duration: 30,\n    agenda: \"Company introduction, understand their needs, qualify opportunity\",\n    notes: \"Reached out via LinkedIn, expressed interest in automation\",\n    insights: [\"Small team\", \"Early stage startup\", \"Bootstrap funded\"],\n    painPoints: [\"Limited resources\", \"Need to automate to scale\"],\n    objections: [\"Budget constraints\", \"Not ready to commit\"],\n    outcome: null\n  },\n  {\n    id: \"5\",\n    date: \"2025-01-15T09:00:00Z\",\n    lead: { name: \"Lisa Wang\", company: \"FinTech Pro\", avatar: \"LW\", score: \"Hot\" },\n    type: \"Technical Deep Dive\",\n    status: \"Scheduled\",\n    duration: 90,\n    agenda: \"API documentation review, security compliance, integration planning\",\n    notes: \"Technical team wants deep dive before commitment\",\n    insights: [\"Security is top priority\", \"Complex integration needs\", \"Large enterprise deal\"],\n    painPoints: [\"Compliance requirements\", \"Legacy system integration\"],\n    objections: [\"Security audit required\", \"Long procurement process\"],\n    outcome: null\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Scheduled\": return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n    case \"Completed\": return \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\";\n    case \"No-Show\": return \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\";\n    case \"Rescheduled\": return \"bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400\";\n    case \"Cancelled\": return \"bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-400\";\n    default: return \"bg-slate-100 text-slate-700 dark:bg-slate-900/20 dark:text-slate-400\";\n  }\n};\n\nconst getScoreColor = (score: string) => {\n  switch (score) {\n    case \"Hot\": return \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\";\n    case \"Warm\": return \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\";\n    case \"Cold\": return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n    default: return \"bg-slate-100 text-slate-700 dark:bg-slate-900/20 dark:text-slate-400\";\n  }\n};\n\nconst getMeetingTypeIcon = (type: string) => {\n  switch (type) {\n    case \"Demo Call\": return <Video className=\"h-4 w-4\" />;\n    case \"Discovery Call\": return <Search className=\"h-4 w-4\" />;\n    case \"Closing Call\": return <Target className=\"h-4 w-4\" />;\n    case \"Intro Call\": return <Phone className=\"h-4 w-4\" />;\n    case \"Technical Deep Dive\": return <Users className=\"h-4 w-4\" />;\n    default: return <CalendarIcon className=\"h-4 w-4\" />;\n  }\n};\n\nexport default function MeetingsView() {\n  const { theme, toggleTheme } = useTheme();\n  const [view, setView] = useState<\"calendar\" | \"table\">(\"table\");\n  const [dateRange, setDateRange] = useState(\"today\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedMeeting, setSelectedMeeting] = useState<typeof mockMeetings[0] | null>(null);\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n\n  const filteredMeetings = mockMeetings.filter(meeting => {\n    const matchesSearch = meeting.lead.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         meeting.lead.company.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         meeting.type.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || meeting.status.toLowerCase() === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const todaysMeetings = mockMeetings.filter(meeting => isToday(parseISO(meeting.date)));\n  const upcomingMeetings = mockMeetings.filter(meeting => new Date(meeting.date) > new Date());\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\" data-testid=\"meetings-view\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"ml-4 lg:ml-0\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                Meetings View\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Manage all scheduled and past meetings\n              </p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme} className=\"p-2\">\n            {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Today's Meetings Highlight */}\n        <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950 border-blue-200 dark:border-blue-800\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg text-blue-900 dark:text-blue-100 flex items-center gap-2\">\n              <CalendarIcon className=\"h-5 w-5\" />\n              Today's Meetings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {todaysMeetings.length > 0 ? (\n              <div className=\"space-y-3\">\n                {todaysMeetings.map((meeting) => (\n                  <div key={meeting.id} className=\"flex items-center justify-between p-3 bg-white dark:bg-slate-800 rounded-lg shadow-sm\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-2 h-8 bg-blue-500 rounded-full\" />\n                      <div>\n                        <p className=\"font-medium text-slate-900 dark:text-white\">\n                          {format(parseISO(meeting.date), \"h:mm a\")} - {meeting.lead.name}\n                        </p>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                          {meeting.type} • {meeting.lead.company}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge className={getScoreColor(meeting.lead.score)}>\n                      {meeting.lead.score}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-blue-700 dark:text-blue-300\">No meetings scheduled for today</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Top Bar Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n          <div className=\"flex flex-wrap gap-3\">\n            <Select value={dateRange} onValueChange={setDateRange}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"month\">This Month</SelectItem>\n                <SelectItem value=\"custom\">Custom Range</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"no-show\">No-Show</SelectItem>\n                <SelectItem value=\"rescheduled\">Rescheduled</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search meetings...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-64\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant={view === \"table\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setView(\"table\")}\n            >\n              <List className=\"h-4 w-4 mr-2\" />\n              Table\n            </Button>\n            <Button\n              variant={view === \"calendar\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setView(\"calendar\")}\n            >\n              <Grid3X3 className=\"h-4 w-4 mr-2\" />\n              Calendar\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-3\">\n            <Tabs value={view} onValueChange={(v) => setView(v as \"calendar\" | \"table\")}>\n              {/* Table View */}\n              <TabsContent value=\"table\" className=\"mt-0\">\n                <Card>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-slate-50 dark:bg-slate-800\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-slate-900 dark:text-white\">Date & Time</th>\n                            <th className=\"text-left p-4 font-medium text-slate-900 dark:text-white\">Lead</th>\n                            <th className=\"text-left p-4 font-medium text-slate-900 dark:text-white\">Type</th>\n                            <th className=\"text-left p-4 font-medium text-slate-900 dark:text-white\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-slate-900 dark:text-white\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {filteredMeetings.map((meeting) => (\n                            <tr key={meeting.id} className=\"border-t border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-800/50\">\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Clock className=\"h-4 w-4 text-slate-400\" />\n                                  <div>\n                                    <p className=\"font-medium text-slate-900 dark:text-white\">\n                                      {format(parseISO(meeting.date), \"MMM d\")}\n                                    </p>\n                                    <p className=\"text-sm text-slate-500\">\n                                      {format(parseISO(meeting.date), \"h:mm a\")}\n                                    </p>\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <Avatar className=\"h-8 w-8\">\n                                    <AvatarFallback className=\"bg-primary/10 text-primary text-sm\">\n                                      {meeting.lead.avatar}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <div>\n                                    <p className=\"font-medium text-slate-900 dark:text-white\">\n                                      {meeting.lead.name}\n                                    </p>\n                                    <p className=\"text-sm text-slate-500\">\n                                      {meeting.lead.company}\n                                    </p>\n                                  </div>\n                                  <Badge className={getScoreColor(meeting.lead.score)} variant=\"secondary\">\n                                    {meeting.lead.score}\n                                  </Badge>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {getMeetingTypeIcon(meeting.type)}\n                                  <span className=\"text-sm text-slate-900 dark:text-white\">\n                                    {meeting.type}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={getStatusColor(meeting.status)} variant=\"secondary\">\n                                  {meeting.status}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Dialog>\n                                    <DialogTrigger asChild>\n                                      <Button \n                                        variant=\"ghost\" \n                                        size=\"sm\"\n                                        onClick={() => setSelectedMeeting(meeting)}\n                                      >\n                                        <Eye className=\"h-4 w-4\" />\n                                      </Button>\n                                    </DialogTrigger>\n                                    <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                                      <MeetingDetailsPopup meeting={selectedMeeting} />\n                                    </DialogContent>\n                                  </Dialog>\n                                  {meeting.status === \"Scheduled\" && (\n                                    <Button variant=\"ghost\" size=\"sm\">\n                                      <CheckCircle className=\"h-4 w-4\" />\n                                    </Button>\n                                  )}\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Calendar View */}\n              <TabsContent value=\"calendar\" className=\"mt-0\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                      <div>\n                        <Calendar\n                          mode=\"single\"\n                          selected={selectedDate}\n                          onSelect={setSelectedDate}\n                          className=\"rounded-md border\"\n                        />\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white\">\n                          {selectedDate ? format(selectedDate, \"MMMM d, yyyy\") : \"Select a date\"}\n                        </h3>\n                        {selectedDate && (\n                          <div className=\"space-y-3\">\n                            {mockMeetings\n                              .filter(meeting => \n                                selectedDate && \n                                format(parseISO(meeting.date), \"yyyy-MM-dd\") === format(selectedDate, \"yyyy-MM-dd\")\n                              )\n                              .map((meeting) => (\n                                <div key={meeting.id} className=\"p-3 border border-slate-200 dark:border-slate-700 rounded-lg\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-center space-x-3\">\n                                      <div className={`w-3 h-3 rounded-full ${\n                                        meeting.lead.score === \"Hot\" ? \"bg-red-500\" :\n                                        meeting.lead.score === \"Warm\" ? \"bg-orange-500\" : \"bg-blue-500\"\n                                      }`} />\n                                      <div>\n                                        <p className=\"font-medium text-slate-900 dark:text-white\">\n                                          {format(parseISO(meeting.date), \"h:mm a\")} - {meeting.lead.name}\n                                        </p>\n                                        <p className=\"text-sm text-slate-500\">\n                                          {meeting.type} • {meeting.lead.company}\n                                        </p>\n                                      </div>\n                                    </div>\n                                    <Badge className={getStatusColor(meeting.status)} variant=\"secondary\">\n                                      {meeting.status}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              ))\n                            }\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Performance Metrics Sidebar */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  This Week\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">12</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Meetings Booked</p>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">85%</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Show Rate</p>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-950/20 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">60%</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Conversion Rate</p>\n                </div>\n              </CardContent>\n            </Card>\n\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Meeting Details Popup Component\nfunction MeetingDetailsPopup({ meeting }: { meeting: typeof mockMeetings[0] | null }) {\n  if (!meeting) return null;\n\n  return (\n    <div className=\"space-y-6\">\n      <DialogHeader>\n        <DialogTitle className=\"text-xl\">Meeting Details</DialogTitle>\n      </DialogHeader>\n\n      {/* Lead Information */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Lead Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarFallback className=\"bg-primary/10 text-primary\">\n                {meeting.lead.avatar}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"font-semibold text-slate-900 dark:text-white\">{meeting.lead.name}</h3>\n              <p className=\"text-slate-600 dark:text-slate-400\">{meeting.lead.company}</p>\n              <Badge className={getScoreColor(meeting.lead.score)} variant=\"secondary\">\n                {meeting.lead.score} Lead\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-slate-500\">Meeting Type</p>\n              <p className=\"font-medium text-slate-900 dark:text-white\">{meeting.type}</p>\n            </div>\n            <div>\n              <p className=\"text-slate-500\">Duration</p>\n              <p className=\"font-medium text-slate-900 dark:text-white\">{meeting.duration} mins</p>\n            </div>\n            <div>\n              <p className=\"text-slate-500\">Date & Time</p>\n              <p className=\"font-medium text-slate-900 dark:text-white\">\n                {format(parseISO(meeting.date), \"MMM d, h:mm a\")}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-slate-500\">Status</p>\n              <Badge className={getStatusColor(meeting.status)} variant=\"secondary\">\n                {meeting.status}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Meeting Agenda */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Meeting Agenda\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-slate-700 dark:text-slate-300\">{meeting.agenda}</p>\n        </CardContent>\n      </Card>\n\n      {/* AI Insights */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Lightbulb className=\"h-5 w-5\" />\n            AI Insights & Recommendations\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-semibold text-slate-900 dark:text-white mb-2 flex items-center gap-2\">\n              <Target className=\"h-4 w-4\" />\n              Key Insights\n            </h4>\n            <ul className=\"space-y-1\">\n              {meeting.insights.map((insight, index) => (\n                <li key={index} className=\"text-sm text-slate-700 dark:text-slate-300 flex items-start gap-2\">\n                  <Star className=\"h-3 w-3 mt-1 text-blue-500\" />\n                  {insight}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold text-slate-900 dark:text-white mb-2 flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4\" />\n              Pain Points\n            </h4>\n            <ul className=\"space-y-1\">\n              {meeting.painPoints.map((pain, index) => (\n                <li key={index} className=\"text-sm text-slate-700 dark:text-slate-300 flex items-start gap-2\">\n                  <XCircle className=\"h-3 w-3 mt-1 text-red-500\" />\n                  {pain}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold text-slate-900 dark:text-white mb-2 flex items-center gap-2\">\n              <RotateCcw className=\"h-4 w-4\" />\n              Likely Objections & Responses\n            </h4>\n            <ul className=\"space-y-1\">\n              {meeting.objections.map((objection, index) => (\n                <li key={index} className=\"text-sm text-slate-700 dark:text-slate-300 flex items-start gap-2\">\n                  <AlertCircle className=\"h-3 w-3 mt-1 text-orange-500\" />\n                  {objection}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notes */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg\">Notes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-slate-700 dark:text-slate-300\">{meeting.notes}</p>\n          {meeting.outcome && (\n            <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n              <p className=\"font-semibold text-green-800 dark:text-green-400\">Outcome:</p>\n              <p className=\"text-green-700 dark:text-green-300\">{meeting.outcome}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":28141},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/nurture-campaigns.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  MessageSquare, \n  Users, \n  TrendingUp, \n  Eye, \n  Edit, \n  Play, \n  Pause, \n  Calendar,\n  Target,\n  BarChart3,\n  Activity,\n  Clock,\n  Mail,\n  MousePointer,\n  CheckCircle,\n  ArrowRight,\n  ArrowDown,\n  Sun,\n  Moon,\n  Menu,\n  Plus,\n  Filter,\n  Search\n} from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { format, parseISO } from \"date-fns\";\n\n// Mock campaign data\nconst mockCampaigns = [\n  {\n    id: \"1\",\n    name: \"Warm Lead Education Series\",\n    type: \"Educational\",\n    description: \"Multi-touch educational sequence for warm leads showing interest but not ready to buy\",\n    status: \"Active\",\n    targetSegment: \"Warm Leads\",\n    startDate: \"2024-12-01T00:00:00Z\",\n    endDate: \"2025-03-01T00:00:00Z\",\n    goal: \"Book Meeting\",\n    leadsInCampaign: 145,\n    openRate: 67.3,\n    clickRate: 23.8,\n    conversionRate: 8.2,\n    steps: [\n      { id: 1, name: \"Welcome & Problem Validation\", type: \"Email\", leads: 145, opens: 98, clicks: 35, conversions: 12, day: 0 },\n      { id: 2, name: \"Industry Case Study\", type: \"Email\", leads: 133, opens: 89, clicks: 42, conversions: 18, day: 3 },\n      { id: 3, name: \"Product Demo Video\", type: \"Email\", leads: 115, opens: 77, clicks: 31, conversions: 15, day: 7 },\n      { id: 4, name: \"Social Proof & Testimonials\", type: \"Email\", leads: 100, opens: 68, clicks: 28, conversions: 11, day: 14 },\n      { id: 5, name: \"Meeting Booking CTA\", type: \"Email\", leads: 89, opens: 60, clicks: 25, conversions: 12, day: 21 }\n    ]\n  },\n  {\n    id: \"2\", \n    name: \"Cold Lead Re-engagement\",\n    type: \"Re-engagement\",\n    description: \"Automated sequence to re-activate cold leads who haven't engaged recently\",\n    status: \"Active\",\n    targetSegment: \"Cold Leads\",\n    startDate: \"2024-11-15T00:00:00Z\",\n    endDate: \"2025-02-15T00:00:00Z\",\n    goal: \"Reactivate\",\n    leadsInCampaign: 89,\n    openRate: 45.2,\n    clickRate: 12.4,\n    conversionRate: 4.5,\n    steps: [\n      { id: 1, name: \"We Miss You - Value Reminder\", type: \"Email\", leads: 89, opens: 40, clicks: 12, conversions: 4, day: 0 },\n      { id: 2, name: \"New Feature Announcement\", type: \"Email\", leads: 85, opens: 38, clicks: 15, conversions: 6, day: 5 },\n      { id: 3, name: \"Limited Time Offer\", type: \"Email\", leads: 79, opens: 35, clicks: 11, conversions: 3, day: 12 },\n      { id: 4, name: \"Final Attempt - Unsubscribe Warning\", type: \"Email\", leads: 76, opens: 32, clicks: 8, conversions: 1, day: 21 }\n    ]\n  },\n  {\n    id: \"3\",\n    name: \"Hot Lead Closing Sequence\", \n    type: \"Closing\",\n    description: \"High-touch sequence for hot leads ready to make a decision\",\n    status: \"Active\",\n    targetSegment: \"Hot Leads\",\n    startDate: \"2024-12-15T00:00:00Z\",\n    endDate: \"2025-01-31T00:00:00Z\",\n    goal: \"Close Deal\",\n    leadsInCampaign: 34,\n    openRate: 89.1,\n    clickRate: 45.6,\n    conversionRate: 35.3,\n    steps: [\n      { id: 1, name: \"Personalized ROI Calculator\", type: \"Email\", leads: 34, opens: 31, clicks: 18, conversions: 12, day: 0 },\n      { id: 2, name: \"Implementation Timeline\", type: \"Email\", leads: 22, opens: 20, clicks: 14, conversions: 8, day: 2 },\n      { id: 3, name: \"Closing Call Invitation\", type: \"Email\", leads: 14, opens: 13, clicks: 10, conversions: 8, day: 5 }\n    ]\n  },\n  {\n    id: \"4\",\n    name: \"Product Launch Teaser\",\n    type: \"Announcement\", \n    description: \"Build excitement for upcoming product features with existing customers\",\n    status: \"Paused\",\n    targetSegment: \"Existing Customers\",\n    startDate: \"2025-01-01T00:00:00Z\",\n    endDate: \"2025-02-28T00:00:00Z\",\n    goal: \"Generate Interest\",\n    leadsInCampaign: 0,\n    openRate: 0,\n    clickRate: 0,\n    conversionRate: 0,\n    steps: [\n      { id: 1, name: \"Coming Soon Announcement\", type: \"Email\", leads: 0, opens: 0, clicks: 0, conversions: 0, day: 0 },\n      { id: 2, name: \"Behind the Scenes Preview\", type: \"Email\", leads: 0, opens: 0, clicks: 0, conversions: 0, day: 7 },\n      { id: 3, name: \"Early Access Invitation\", type: \"Email\", leads: 0, opens: 0, clicks: 0, conversions: 0, day: 14 }\n    ]\n  }\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"Active\": return \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\";\n    case \"Paused\": return \"bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400\";\n    case \"Draft\": return \"bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-400\";\n    default: return \"bg-slate-100 text-slate-700 dark:bg-slate-900/20 dark:text-slate-400\";\n  }\n};\n\nconst getSegmentColor = (segment: string) => {\n  switch (segment) {\n    case \"Hot Leads\": return \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\";\n    case \"Warm Leads\": return \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\";\n    case \"Cold Leads\": return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n    case \"Existing Customers\": return \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400\";\n    default: return \"bg-slate-100 text-slate-700 dark:bg-slate-900/20 dark:text-slate-400\";\n  }\n};\n\nconst getCampaignTypeIcon = (type: string) => {\n  switch (type) {\n    case \"Educational\": return <MessageSquare className=\"h-5 w-5\" />;\n    case \"Re-engagement\": return <Activity className=\"h-5 w-5\" />;\n    case \"Closing\": return <Target className=\"h-5 w-5\" />;\n    case \"Announcement\": return <Mail className=\"h-5 w-5\" />;\n    default: return <MessageSquare className=\"h-5 w-5\" />;\n  }\n};\n\nexport default function NurtureCampaigns() {\n  const { theme, toggleTheme } = useTheme();\n  const [selectedCampaign, setSelectedCampaign] = useState<typeof mockCampaigns[0] | null>(null);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [segmentFilter, setSegmentFilter] = useState(\"all\");\n\n  const filteredCampaigns = mockCampaigns.filter(campaign => {\n    const matchesStatus = statusFilter === \"all\" || campaign.status.toLowerCase() === statusFilter;\n    const matchesSegment = segmentFilter === \"all\" || campaign.targetSegment.toLowerCase().includes(segmentFilter);\n    return matchesStatus && matchesSegment;\n  });\n\n  const activeCampaigns = mockCampaigns.filter(c => c.status === \"Active\").length;\n  const totalLeads = mockCampaigns.reduce((sum, c) => sum + c.leadsInCampaign, 0);\n  const avgOpenRate = mockCampaigns.reduce((sum, c) => sum + c.openRate, 0) / mockCampaigns.length;\n  const avgConversionRate = mockCampaigns.reduce((sum, c) => sum + c.conversionRate, 0) / mockCampaigns.length;\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\" data-testid=\"nurture-campaigns\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"ml-4 lg:ml-0\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                Nurture Campaigns\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Manage automated lead nurturing sequences\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              New Campaign\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme} className=\"p-2\">\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Overview Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Activity className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{activeCampaigns}</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Active Campaigns</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{totalLeads}</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Total Leads</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Mail className=\"h-5 w-5 text-orange-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{avgOpenRate.toFixed(1)}%</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Avg Open Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{avgConversionRate.toFixed(1)}%</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Avg Conversion</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-wrap gap-4 items-center\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-40\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"paused\">Paused</SelectItem>\n              <SelectItem value=\"draft\">Draft</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={segmentFilter} onValueChange={setSegmentFilter}>\n            <SelectTrigger className=\"w-48\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Segments</SelectItem>\n              <SelectItem value=\"hot\">Hot Leads</SelectItem>\n              <SelectItem value=\"warm\">Warm Leads</SelectItem>\n              <SelectItem value=\"cold\">Cold Leads</SelectItem>\n              <SelectItem value=\"existing\">Existing Customers</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Campaign Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredCampaigns.map((campaign) => (\n            <Card key={campaign.id} className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`p-2 rounded-lg ${getSegmentColor(campaign.targetSegment)}`}>\n                      {getCampaignTypeIcon(campaign.type)}\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg leading-tight\">{campaign.name}</CardTitle>\n                      <p className=\"text-sm text-slate-500 mt-1\">{campaign.type}</p>\n                    </div>\n                  </div>\n                  <Badge className={getStatusColor(campaign.status)} variant=\"secondary\">\n                    {campaign.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-slate-600 dark:text-slate-400 line-clamp-2\">\n                  {campaign.description}\n                </p>\n\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div>\n                    <p className=\"text-slate-500\">Target</p>\n                    <Badge className={getSegmentColor(campaign.targetSegment)} variant=\"outline\">\n                      {campaign.targetSegment}\n                    </Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-slate-500\">Goal</p>\n                    <p className=\"font-medium text-slate-900 dark:text-white\">{campaign.goal}</p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-slate-500\">Duration</p>\n                    <p className=\"font-medium text-slate-900 dark:text-white\">\n                      {format(parseISO(campaign.startDate), \"MMM d\")} - {format(parseISO(campaign.endDate), \"MMM d\")}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-slate-500\">Leads</p>\n                    <p className=\"font-medium text-slate-900 dark:text-white\">{campaign.leadsInCampaign}</p>\n                  </div>\n                </div>\n\n                {/* Performance Metrics */}\n                <div className=\"space-y-3 pt-3 border-t border-slate-200 dark:border-slate-700\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600 dark:text-slate-400\">Open Rate</span>\n                    <span className=\"text-sm font-medium text-slate-900 dark:text-white\">{campaign.openRate.toFixed(1)}%</span>\n                  </div>\n                  <Progress value={campaign.openRate} className=\"h-2\" />\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-slate-500\">Click Rate</p>\n                      <p className=\"font-medium text-slate-900 dark:text-white\">{campaign.clickRate.toFixed(1)}%</p>\n                    </div>\n                    <div>\n                      <p className=\"text-slate-500\">Conversion</p>\n                      <p className=\"font-medium text-slate-900 dark:text-white\">{campaign.conversionRate.toFixed(1)}%</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center justify-between pt-3 border-t border-slate-200 dark:border-slate-700\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      {campaign.status === \"Active\" ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  \n                  <Sheet>\n                    <SheetTrigger asChild>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => setSelectedCampaign(campaign)}\n                        className=\"group-hover:bg-primary group-hover:text-primary-foreground\"\n                      >\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        View Details\n                      </Button>\n                    </SheetTrigger>\n                    <SheetContent className=\"w-[800px] max-w-[90vw]\">\n                      <CampaignDetailView campaign={selectedCampaign} />\n                    </SheetContent>\n                  </Sheet>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Campaign Detail View Component\nfunction CampaignDetailView({ campaign }: { campaign: typeof mockCampaigns[0] | null }) {\n  if (!campaign) return null;\n\n  const totalClicks = campaign.steps.reduce((sum, step) => sum + step.clicks, 0);\n  const totalConversions = campaign.steps.reduce((sum, step) => sum + step.conversions, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <SheetHeader>\n        <SheetTitle className=\"text-xl\">{campaign.name}</SheetTitle>\n      </SheetHeader>\n\n      {/* Campaign Summary */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              {getCampaignTypeIcon(campaign.type)}\n              Campaign Overview\n            </CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              <Badge className={getStatusColor(campaign.status)}>\n                {campaign.status}\n              </Badge>\n              <Switch \n                checked={campaign.status === \"Active\"} \n                disabled={campaign.status === \"Draft\"}\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-slate-700 dark:text-slate-300\">{campaign.description}</p>\n          \n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n            <div>\n              <p className=\"text-slate-500\">Target Segment</p>\n              <Badge className={getSegmentColor(campaign.targetSegment)} variant=\"outline\">\n                {campaign.targetSegment}\n              </Badge>\n            </div>\n            <div>\n              <p className=\"text-slate-500\">Goal</p>\n              <p className=\"font-medium text-slate-900 dark:text-white\">{campaign.goal}</p>\n            </div>\n            <div>\n              <p className=\"text-slate-500\">Duration</p>\n              <p className=\"font-medium text-slate-900 dark:text-white\">\n                {format(parseISO(campaign.startDate), \"MMM d\")} - {format(parseISO(campaign.endDate), \"MMM d\")}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-slate-500\">Leads</p>\n              <p className=\"font-medium text-slate-900 dark:text-white\">{campaign.leadsInCampaign}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Journey Map Visualization */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Campaign Journey Flow\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {campaign.steps.map((step, index) => (\n              <div key={step.id} className=\"relative\">\n                <div className=\"flex items-center space-x-4\">\n                  {/* Step Circle */}\n                  <div className=\"flex-shrink-0 w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-blue-700 dark:text-blue-400 font-semibold\">{step.id}</span>\n                  </div>\n                  \n                  {/* Step Content */}\n                  <div className=\"flex-1 bg-slate-50 dark:bg-slate-800 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h4 className=\"font-semibold text-slate-900 dark:text-white\">{step.name}</h4>\n                        <div className=\"flex items-center space-x-4 mt-2 text-sm text-slate-600 dark:text-slate-400\">\n                          <span>Day {step.day}</span>\n                          <span>•</span>\n                          <span>{step.type}</span>\n                        </div>\n                      </div>\n                      \n                      {/* Step Metrics */}\n                      <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                        <div className=\"text-center\">\n                          <p className=\"font-medium text-slate-900 dark:text-white\">{step.leads}</p>\n                          <p className=\"text-slate-500\">Leads</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"font-medium text-slate-900 dark:text-white\">{step.opens}</p>\n                          <p className=\"text-slate-500\">Opens</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"font-medium text-slate-900 dark:text-white\">{step.clicks}</p>\n                          <p className=\"text-slate-500\">Clicks</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"font-medium text-slate-900 dark:text-white\">{step.conversions}</p>\n                          <p className=\"text-slate-500\">Converts</p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bars */}\n                    <div className=\"grid grid-cols-3 gap-4 mt-4\">\n                      <div>\n                        <div className=\"flex justify-between text-xs mb-1\">\n                          <span>Open Rate</span>\n                          <span>{((step.opens / step.leads) * 100).toFixed(1)}%</span>\n                        </div>\n                        <Progress value={(step.opens / step.leads) * 100} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-xs mb-1\">\n                          <span>Click Rate</span>\n                          <span>{((step.clicks / step.opens) * 100).toFixed(1)}%</span>\n                        </div>\n                        <Progress value={(step.clicks / step.opens) * 100} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-xs mb-1\">\n                          <span>Conversion</span>\n                          <span>{((step.conversions / step.leads) * 100).toFixed(1)}%</span>\n                        </div>\n                        <Progress value={(step.conversions / step.leads) * 100} className=\"h-2\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Flow Arrow */}\n                {index < campaign.steps.length - 1 && (\n                  <div className=\"flex items-center justify-center my-2\">\n                    <ArrowDown className=\"h-6 w-6 text-slate-400\" />\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Step Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {campaign.steps.map((step) => (\n                <div key={step.id} className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Step {step.id}: {step.name.substring(0, 20)}...</span>\n                    <span>{((step.opens / step.leads) * 100).toFixed(1)}% / {((step.clicks / step.opens) * 100).toFixed(1)}%</span>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <div className=\"h-2 bg-slate-200 dark:bg-slate-700 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-blue-500 transition-all duration-500\"\n                          style={{ width: `${(step.opens / step.leads) * 100}%` }}\n                        />\n                      </div>\n                      <p className=\"text-xs text-slate-500 mt-1\">Open Rate</p>\n                    </div>\n                    <div>\n                      <div className=\"h-2 bg-slate-200 dark:bg-slate-700 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-2 bg-green-500 transition-all duration-500\"\n                          style={{ width: `${(step.clicks / step.opens) * 100}%` }}\n                        />\n                      </div>\n                      <p className=\"text-xs text-slate-500 mt-1\">Click Rate</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Conversion Funnel\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{campaign.leadsInCampaign}</p>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">Starting Leads</p>\n              </div>\n              \n              <div className=\"flex items-center justify-center\">\n                <ArrowDown className=\"h-6 w-6 text-slate-400\" />\n              </div>\n              \n              <div className=\"text-center p-4 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{totalClicks}</p>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">Total Clicks</p>\n              </div>\n              \n              <div className=\"flex items-center justify-center\">\n                <ArrowDown className=\"h-6 w-6 text-slate-400\" />\n              </div>\n              \n              <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-950/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{totalConversions}</p>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">Conversions</p>\n              </div>\n              \n              <div className=\"text-center pt-4 border-t border-slate-200 dark:border-slate-700\">\n                <p className=\"text-lg font-semibold text-slate-900 dark:text-white\">\n                  {((totalConversions / campaign.leadsInCampaign) * 100).toFixed(1)}%\n                </p>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">Overall Conversion Rate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":27929},"client/src/pages/pipeline-stages.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Users, \n  Phone, \n  Calendar, \n  MessageSquare, \n  UserX, \n  CheckCircle, \n  XCircle, \n  Trophy,\n  Sun,\n  Moon,\n  Menu,\n  TrendingUp,\n  BarChart3,\n  Clock\n} from \"lucide-react\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\n\n// Mock data for pipeline stages\nconst pipelineStages = [\n  { id: 1, name: \"Lead Enriched\", icon: Users, color: \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\", count: 145 },\n  { id: 2, name: \"Initial AI Call Done\", icon: Phone, color: \"bg-indigo-100 text-indigo-700 dark:bg-indigo-900/20 dark:text-indigo-400\", count: 89 },\n  { id: 3, name: \"Meeting Booked\", icon: Calendar, color: \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400\", count: 67 },\n  { id: 4, name: \"In Nurture Campaign\", icon: MessageSquare, color: \"bg-pink-100 text-pink-700 dark:bg-pink-900/20 dark:text-pink-400\", count: 45 },\n  { id: 5, name: \"Meeting No Show-up\", icon: UserX, color: \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\", count: 23 },\n  { id: 6, name: \"Meeting Finished\", icon: CheckCircle, color: \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\", count: 34 },\n  { id: 7, name: \"No More Interested\", icon: XCircle, color: \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\", count: 12 },\n  { id: 8, name: \"Deal Won\", icon: Trophy, color: \"bg-emerald-100 text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-400\", count: 18 }\n];\n\n// Mock lead data with expanded dataset for each stage\nconst mockLeadsByStage = {\n  \"Lead Enriched\": [\n    { id: \"1\", name: \"Sarah Chen\", company: \"TechCorp\", avatar: \"SC\", email: \"sarah@techcorp.com\", score: \"Hot\", addedDate: \"2025-01-14\" },\n    { id: \"2\", name: \"Mike Johnson\", company: \"DataFlow\", avatar: \"MJ\", email: \"mike@dataflow.com\", score: \"Warm\", addedDate: \"2025-01-14\" },\n    { id: \"3\", name: \"Alex Kumar\", company: \"CloudTech\", avatar: \"AK\", email: \"alex@cloudtech.com\", score: \"Cold\", addedDate: \"2025-01-13\" },\n    { id: \"4\", name: \"Emma Wilson\", company: \"DevCorp\", avatar: \"EW\", email: \"emma@devcorp.com\", score: \"Hot\", addedDate: \"2025-01-13\" },\n    { id: \"5\", name: \"John Smith\", company: \"StartupXYZ\", avatar: \"JS\", email: \"john@startupxyz.com\", score: \"Warm\", addedDate: \"2025-01-12\" },\n  ],\n  \"Initial AI Call Done\": [\n    { id: \"6\", name: \"Lisa Park\", company: \"InnovateLabs\", avatar: \"LP\", email: \"lisa@innovate.com\", score: \"Hot\", addedDate: \"2025-01-13\" },\n    { id: \"7\", name: \"David Chen\", company: \"TechSolutions\", avatar: \"DC\", email: \"david@techsol.com\", score: \"Warm\", addedDate: \"2025-01-12\" },\n    { id: \"8\", name: \"Maria Garcia\", company: \"FinanceHub\", avatar: \"MG\", email: \"maria@financehub.com\", score: \"Hot\", addedDate: \"2025-01-12\" },\n  ],\n  \"Meeting Booked\": [\n    { id: \"9\", name: \"Robert Brown\", company: \"ScaleUp Inc\", avatar: \"RB\", email: \"robert@scaleup.com\", score: \"Hot\", addedDate: \"2025-01-11\" },\n    { id: \"10\", name: \"Jennifer Lee\", company: \"GrowthCo\", avatar: \"JL\", email: \"jen@growthco.com\", score: \"Warm\", addedDate: \"2025-01-11\" },\n  ],\n  \"In Nurture Campaign\": [\n    { id: \"11\", name: \"Steven Davis\", company: \"Enterprise Ltd\", avatar: \"SD\", email: \"steven@enterprise.com\", score: \"Warm\", addedDate: \"2025-01-10\" },\n    { id: \"12\", name: \"Rachel Kim\", company: \"SaaS Solutions\", avatar: \"RK\", email: \"rachel@saas.com\", score: \"Cold\", addedDate: \"2025-01-10\" },\n  ],\n  \"Meeting No Show-up\": [\n    { id: \"13\", name: \"Tom Anderson\", company: \"MissedCorp\", avatar: \"TA\", email: \"tom@missed.com\", score: \"Cold\", addedDate: \"2025-01-09\" },\n  ],\n  \"Meeting Finished\": [\n    { id: \"14\", name: \"Amy Johnson\", company: \"CompleteCorp\", avatar: \"AJ\", email: \"amy@complete.com\", score: \"Hot\", addedDate: \"2025-01-08\" },\n    { id: \"15\", name: \"Chris Wilson\", company: \"DoneCorp\", avatar: \"CW\", email: \"chris@done.com\", score: \"Warm\", addedDate: \"2025-01-07\" },\n  ],\n  \"No More Interested\": [\n    { id: \"16\", name: \"Sam Taylor\", company: \"NotInterestedInc\", avatar: \"ST\", email: \"sam@notint.com\", score: \"Cold\", addedDate: \"2025-01-06\" },\n  ],\n  \"Deal Won\": [\n    { id: \"17\", name: \"Emily Rodriguez\", company: \"CloudSync\", avatar: \"ER\", email: \"emily@cloudsync.com\", score: \"Hot\", addedDate: \"2025-01-05\" },\n    { id: \"18\", name: \"James Wilson\", company: \"StartupX\", avatar: \"JW\", email: \"james@startupx.com\", score: \"Hot\", addedDate: \"2025-01-04\" },\n  ]\n};\n\n// Mock lead data for animation\nconst mockLeads = [\n  { id: \"1\", name: \"Sarah Chen\", company: \"TechCorp\", stage: \"Lead Enriched\", avatar: \"SC\", progress: 12.5 },\n  { id: \"2\", name: \"Mike Johnson\", company: \"DataFlow\", stage: \"Initial AI Call Done\", avatar: \"MJ\", progress: 25 },\n  { id: \"3\", name: \"Emily Rodriguez\", company: \"CloudSync\", stage: \"Meeting Booked\", avatar: \"ER\", progress: 37.5 },\n  { id: \"4\", name: \"David Park\", company: \"AI Solutions\", stage: \"In Nurture Campaign\", avatar: \"DP\", progress: 50 },\n  { id: \"5\", name: \"Lisa Wang\", company: \"FinTech Pro\", stage: \"Meeting Finished\", avatar: \"LW\", progress: 75 },\n  { id: \"6\", name: \"James Wilson\", company: \"StartupX\", stage: \"Deal Won\", avatar: \"JW\", progress: 100 },\n];\n\n// Funnel data for conversion visualization\nconst funnelData = [\n  { stage: \"Lead Enriched\", count: 145, percentage: 100 },\n  { stage: \"Initial AI Call Done\", count: 89, percentage: 61.4 },\n  { stage: \"Meeting Booked\", count: 67, percentage: 46.2 },\n  { stage: \"In Nurture Campaign\", count: 45, percentage: 31.0 },\n  { stage: \"Meeting Finished\", count: 34, percentage: 23.4 },\n  { stage: \"Deal Won\", count: 18, percentage: 12.4 }\n];\n\nexport default function PipelineStages() {\n  const { theme, toggleTheme } = useTheme();\n  const [selectedStage, setSelectedStage] = useState<number | null>(null);\n  const [selectedStageName, setSelectedStageName] = useState<string | null>(null);\n  const [animatingLeads, setAnimatingLeads] = useState<string[]>([]);\n  const [hoveredFunnelStage, setHoveredFunnelStage] = useState<string | null>(null);\n\n  // Simulate lead movement animation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const randomLead = mockLeads[Math.floor(Math.random() * mockLeads.length)];\n      setAnimatingLeads(prev => [...prev, randomLead.id]);\n      \n      setTimeout(() => {\n        setAnimatingLeads(prev => prev.filter(id => id !== randomLead.id));\n      }, 2000);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStageIcon = (stage: typeof pipelineStages[0]) => {\n    const Icon = stage.icon;\n    return <Icon className=\"h-5 w-5\" />;\n  };\n\n  const getScoreColor = (score: string) => {\n    switch (score) {\n      case \"Hot\": return \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\";\n      case \"Warm\": return \"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\";\n      case \"Cold\": return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n      default: return \"bg-slate-100 text-slate-700 dark:bg-slate-900/20 dark:text-slate-400\";\n    }\n  };\n\n  const handleStageClick = (stageId: number, stageName: string) => {\n    setSelectedStage(stageId);\n    setSelectedStageName(stageName);\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\" data-testid=\"pipeline-stages\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700\" data-testid=\"header\">\n        <div className=\"flex items-center justify-between px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden p-2\" data-testid=\"mobile-menu-button\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"ml-4 lg:ml-0\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"page-title\">\n                Pipeline Stages\n              </h1>\n              <p className=\"text-sm text-slate-600 dark:text-slate-400\" data-testid=\"page-subtitle\">\n                Track leads through your automated sales journey\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleTheme}\n            className=\"p-2\"\n            data-testid=\"theme-toggle\"\n          >\n            {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-8\">\n        {/* Progress Flow Timeline */}\n        <Card className=\"bg-white dark:bg-slate-800\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Sales Process Timeline\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative\">\n              {/* Progress Line */}\n              <div className=\"absolute top-8 left-0 right-0 h-1 bg-slate-200 dark:bg-slate-700 rounded-full\" />\n              <div className=\"absolute top-8 left-0 h-1 bg-gradient-to-r from-blue-500 to-emerald-500 rounded-full\" style={{ width: '60%' }} />\n              \n              {/* Stage Nodes */}\n              <div className=\"relative flex justify-between items-start\">\n                {pipelineStages.map((stage, index) => (\n                  <div key={stage.id} className=\"flex flex-col items-center min-w-0 flex-1\">\n                    <div \n                      className={`w-16 h-16 rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 ${\n                        selectedStage === stage.id ? 'ring-4 ring-blue-200 dark:ring-blue-800' : ''\n                      } ${stage.color} hover:scale-110`}\n                      onClick={() => setSelectedStage(selectedStage === stage.id ? null : stage.id)}\n                      data-testid={`stage-node-${stage.id}`}\n                    >\n                      {getStageIcon(stage)}\n                    </div>\n                    <div className=\"mt-3 text-center\">\n                      <p className=\"text-xs font-medium text-slate-900 dark:text-white leading-tight max-w-20\">\n                        {stage.name}\n                      </p>\n                      <Badge variant=\"secondary\" className=\"mt-1 text-xs\">\n                        {stage.count}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Conversion Funnel Chart */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"bg-white dark:bg-slate-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Conversion Funnel\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative py-6\">\n                {/* Clean, centered funnel design */}\n                <div className=\"max-w-2xl mx-auto\">\n                  <svg width=\"100%\" height=\"320\" viewBox=\"0 0 400 320\" className=\"mx-auto\">\n                    {/* Clean funnel sections */}\n                    {funnelData.map((item, index) => {\n                      const colors = [\n                        '#FDE68A', // Light Yellow\n                        '#6EE7B7', // Light Green  \n                        '#93C5FD', // Light Blue\n                        '#F9A8D4', // Light Pink\n                        '#C4B5FD', // Light Purple\n                        '#FCA5A5'  // Light Red\n                      ];\n                      \n                      // Simplified funnel geometry\n                      const baseWidth = 280;\n                      const reduction = index * 35;\n                      const topWidth = baseWidth - reduction;\n                      const bottomWidth = baseWidth - (reduction + 35);\n                      const height = 40;\n                      const yPos = index * 35 + 20;\n                      \n                      return (\n                        <g key={index}>\n                          {/* Funnel section */}\n                          <path\n                            d={`M ${200 - topWidth/2} ${yPos} \n                                L ${200 + topWidth/2} ${yPos} \n                                L ${200 + bottomWidth/2} ${yPos + height} \n                                L ${200 - bottomWidth/2} ${yPos + height} Z`}\n                            fill={colors[index]}\n                            stroke=\"#1F2937\"\n                            strokeWidth=\"2\"\n                            className=\"cursor-pointer transition-all duration-300 hover:opacity-80 hover:stroke-4\"\n                            onClick={() => handleStageClick(pipelineStages.find(s => s.name === item.stage)?.id || 1, item.stage)}\n                            onMouseEnter={() => setHoveredFunnelStage(item.stage)}\n                            onMouseLeave={() => setHoveredFunnelStage(null)}\n                          />\n                          \n                          {/* Stage content */}\n                          <foreignObject x={200 - 60} y={yPos + 8} width=\"120\" height=\"24\">\n                            <div className=\"flex items-center justify-center text-slate-800 font-medium text-sm\">\n                              {(() => {\n                                const IconComponent = pipelineStages.find(s => s.name === item.stage)?.icon || Users;\n                                return (\n                                  <div className=\"flex items-center space-x-2\">\n                                    <IconComponent size={14} />\n                                    <span>{item.count}</span>\n                                  </div>\n                                );\n                              })()}\n                            </div>\n                          </foreignObject>\n                        </g>\n                      );\n                    })}\n                    \n                    {/* Funnel bottom outlet */}\n                    <rect\n                      x={200 - 20}\n                      y={250}\n                      width={40}\n                      height={25}\n                      fill=\"#FCA5A5\"\n                      stroke=\"#1F2937\"\n                      strokeWidth=\"2\"\n                    />\n                  </svg>\n                  \n                  {/* Stage labels below funnel */}\n                  <div className=\"mt-6 grid grid-cols-2 gap-4\">\n                    {funnelData.map((item, index) => (\n                      <div \n                        key={index}\n                        className=\"flex items-center space-x-3 p-3 bg-slate-50 dark:bg-slate-700 rounded-lg cursor-pointer hover:bg-slate-100 dark:hover:bg-slate-600 transition-colors\"\n                        onClick={() => handleStageClick(pipelineStages.find(s => s.name === item.stage)?.id || 1, item.stage)}\n                      >\n                        <div \n                          className=\"w-4 h-4 rounded-sm\"\n                          style={{ \n                            backgroundColor: ['#FDE68A', '#6EE7B7', '#93C5FD', '#F9A8D4', '#C4B5FD', '#FCA5A5'][index]\n                          }}\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-slate-900 dark:text-white truncate\">\n                            {item.stage}\n                          </p>\n                          <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                            {item.count} leads • {item.percentage.toFixed(1)}%\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"inline-flex items-center justify-center w-6 h-6 bg-slate-200 dark:bg-slate-600 text-slate-700 dark:text-slate-300 rounded-full text-xs font-medium\">\n                            {index + 1}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                {/* Hover tooltip */}\n                {hoveredFunnelStage && (\n                  <div className=\"absolute top-4 right-4 z-10\">\n                    <div className=\"bg-slate-900 dark:bg-slate-100 text-white dark:text-slate-900 px-3 py-2 rounded-lg text-sm shadow-lg\">\n                      <p className=\"font-medium\">{hoveredFunnelStage}</p>\n                      <p className=\"text-xs opacity-90\">\n                        {funnelData.find(f => f.stage === hoveredFunnelStage)?.count} leads \n                        ({funnelData.find(f => f.stage === hoveredFunnelStage)?.percentage.toFixed(1)}%)\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Stage Details */}\n          <Card className=\"bg-white dark:bg-slate-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                {selectedStage ? \n                  pipelineStages.find(s => s.id === selectedStage)?.name || 'Stage Details' : \n                  'Stage Performance'\n                }\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {selectedStage && selectedStageName ? (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 border-b border-slate-200 dark:border-slate-700\">\n                    <div className={`w-16 h-16 rounded-full mx-auto mb-3 flex items-center justify-center ${\n                      pipelineStages.find(s => s.id === selectedStage)?.color\n                    }`}>\n                      {getStageIcon(pipelineStages.find(s => s.id === selectedStage)!)}\n                    </div>\n                    <h3 className=\"text-xl font-bold text-slate-900 dark:text-white\">\n                      {selectedStageName}\n                    </h3>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      {mockLeadsByStage[selectedStageName as keyof typeof mockLeadsByStage]?.length || 0} leads\n                    </p>\n                  </div>\n                  \n                  {/* Scrollable Lead List */}\n                  <div className=\"h-64 overflow-y-auto space-y-2\">\n                    {mockLeadsByStage[selectedStageName as keyof typeof mockLeadsByStage]?.map((lead) => (\n                      <div key={lead.id} className=\"flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-700 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-600 transition-colors\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarFallback className=\"bg-primary/10 text-primary text-xs\">\n                              {lead.avatar}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium text-slate-900 dark:text-white text-sm\">\n                              {lead.name}\n                            </p>\n                            <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                              {lead.company}\n                            </p>\n                            <p className=\"text-xs text-slate-400 dark:text-slate-500\">\n                              {lead.email}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge className={getScoreColor(lead.score)} variant=\"secondary\">\n                            {lead.score}\n                          </Badge>\n                          <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n                            {lead.addedDate}\n                          </p>\n                        </div>\n                      </div>\n                    )) || (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-slate-500 dark:text-slate-400\">No leads found in this stage</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <BarChart3 className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n                  <p className=\"text-slate-600 dark:text-slate-400\">\n                    Click on a stage in the funnel to view leads\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Lead Movement Tracking */}\n        <Card className=\"bg-white dark:bg-slate-800\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Live Lead Movement Tracker\n            </CardTitle>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400 mt-1\">\n              Real-time visualization of leads moving through your sales pipeline\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Movement Legend */}\n              <div className=\"flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-700 rounded-lg\">\n                <div className=\"flex items-center space-x-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-slate-700 dark:text-slate-300\">Currently Moving</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-sm text-slate-700 dark:text-slate-300\">Completed Stage</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-slate-400 rounded-full\"></div>\n                    <span className=\"text-sm text-slate-700 dark:text-slate-300\">Waiting</span>\n                  </div>\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Updates every 30 seconds\n                </Badge>\n              </div>\n\n              {/* Pipeline Flow Visualization */}\n              <div className=\"relative\">\n                {/* Progress Path */}\n                <div className=\"flex items-center justify-between mb-8\">\n                  {pipelineStages.slice(0, 6).map((stage, index) => (\n                    <div key={stage.id} className=\"flex flex-col items-center\">\n                      <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white text-sm font-medium ${\n                        index <= 3 ? 'bg-green-500' : index === 4 ? 'bg-blue-500 animate-pulse' : 'bg-slate-400'\n                      }`}>\n                        {index + 1}\n                      </div>\n                      <div className=\"text-xs text-center mt-2 max-w-20 leading-tight\">\n                        <p className=\"font-medium text-slate-900 dark:text-white\">{stage.name}</p>\n                        <p className=\"text-slate-500 dark:text-slate-400\">{stage.count} leads</p>\n                      </div>\n                      {index < 5 && (\n                        <div className=\"absolute top-6 w-full h-0.5 bg-slate-200 dark:bg-slate-600\" \n                             style={{ \n                               left: `${(100 / 5) * index + (100 / 5 / 2)}%`, \n                               width: `${100 / 5}%`,\n                               backgroundColor: index < 3 ? '#22c55e' : '#e2e8f0'\n                             }} />\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                {/* Active Lead Movement Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {mockLeads.slice(0, 4).map((lead, index) => (\n                    <div\n                      key={lead.id}\n                      className={`p-3 bg-white dark:bg-slate-700 rounded-lg border-2 transition-all duration-500 ${\n                        animatingLeads.includes(lead.id) \n                          ? 'border-blue-500 shadow-lg scale-105' \n                          : 'border-slate-200 dark:border-slate-600'\n                      }`}\n                      data-testid={`movement-lead-${lead.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback className=\"bg-primary/10 text-primary text-sm\">\n                            {lead.avatar}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium text-slate-900 dark:text-white text-sm\">\n                            {lead.name}\n                          </p>\n                          <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                            {lead.company}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs text-slate-600 dark:text-slate-400\">Current Stage:</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {lead.stage}\n                          </Badge>\n                        </div>\n                        <div className=\"w-full bg-slate-200 dark:bg-slate-600 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full transition-all duration-1000 ${\n                              animatingLeads.includes(lead.id) \n                                ? 'bg-gradient-to-r from-blue-500 to-purple-500' \n                                : 'bg-gradient-to-r from-green-500 to-blue-500'\n                            }`}\n                            style={{ width: `${lead.progress}%` }}\n                          />\n                        </div>\n                        <p className=\"text-xs text-center text-slate-500 dark:text-slate-400\">\n                          {lead.progress}% Complete\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Movement Statistics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t border-slate-200 dark:border-slate-700\">\n                <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">24</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Leads moved today</p>\n                </div>\n                <div className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">2.3</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Avg days per stage</p>\n                </div>\n                <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">85%</p>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Pipeline velocity</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":28509},"client/src/components/dashboard/metrics-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Phone, Calendar, DollarSign, ArrowUp, ArrowDown } from \"lucide-react\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\ninterface MetricsGridProps {\n  metrics: DashboardMetrics;\n}\n\nexport function MetricsGrid({ metrics }: MetricsGridProps) {\n  const metricsData = [\n    {\n      title: \"Total Leads in Pipeline\",\n      value: metrics.totalLeads.toLocaleString(),\n      change: \"+12.3% from last month\",\n      changeType: \"positive\" as const,\n      icon: Users,\n      color: \"primary\",\n    },\n    {\n      title: \"Contacted Leads\",\n      value: metrics.contactedLeads.toLocaleString(),\n      change: \"+8.7% from last month\",\n      changeType: \"positive\" as const,\n      icon: Phone,\n      color: \"warning\",\n    },\n    {\n      title: \"Meetings Booked\",\n      value: metrics.meetingsBooked.toLocaleString(),\n      change: \"+15.2% from last month\",\n      changeType: \"positive\" as const,\n      icon: Calendar,\n      color: \"accent\",\n    },\n    {\n      title: \"Potential Deals\",\n      value: metrics.potentialDeals,\n      change: \"-2.1% from last month\",\n      changeType: \"negative\" as const,\n      icon: DollarSign,\n      color: \"danger\",\n    },\n  ];\n\n  const colorClasses = {\n    primary: \"bg-primary/10 text-primary\",\n    warning: \"bg-amber-50 text-amber-600 dark:bg-amber-900/20 dark:text-amber-400\",\n    accent: \"bg-emerald-50 text-emerald-600 dark:bg-emerald-900/20 dark:text-emerald-400\",\n    danger: \"bg-red-50 text-red-600 dark:bg-red-900/20 dark:text-red-400\",\n  };\n\n  const changeColorClasses = {\n    positive: \"text-emerald-600 dark:text-emerald-400\",\n    negative: \"text-red-600 dark:text-red-400\",\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"metrics-grid\">\n      {metricsData.map((metric, index) => {\n        const Icon = metric.icon;\n        return (\n          <Card key={metric.title} className=\"bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700\" data-testid={`metric-card-${index}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 font-medium\" data-testid={`metric-title-${index}`}>\n                    {metric.title}\n                  </p>\n                  <p className=\"text-3xl font-bold text-slate-900 dark:text-white mt-2\" data-testid={`metric-value-${index}`}>\n                    {metric.value}\n                  </p>\n                  <p className={`text-sm font-medium mt-1 ${changeColorClasses[metric.changeType]}`} data-testid={`metric-change-${index}`}>\n                    {metric.changeType === \"positive\" ? (\n                      <ArrowUp className=\"inline h-3 w-3 mr-1\" />\n                    ) : (\n                      <ArrowDown className=\"inline h-3 w-3 mr-1\" />\n                    )}\n                    {metric.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorClasses[metric.color]}`} data-testid={`metric-icon-${index}`}>\n                  <Icon className=\"h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3354},"client/src/components/dashboard/pipeline-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\ninterface PipelineChartProps {\n  metrics: DashboardMetrics;\n}\n\nexport function PipelineChart({ metrics }: PipelineChartProps) {\n  return (\n    <Card className=\"lg:col-span-2 bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700\" data-testid=\"pipeline-chart\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-slate-900 dark:text-white\" data-testid=\"chart-title\">\n            Lead Pipeline Performance\n          </CardTitle>\n          <Select defaultValue=\"30days\" data-testid=\"chart-timeframe-select\">\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"30days\">Last 30 days</SelectItem>\n              <SelectItem value=\"90days\">Last 90 days</SelectItem>\n              <SelectItem value=\"1year\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80\" data-testid=\"chart-container\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={metrics.pipelineData}>\n              <CartesianGrid \n                strokeDasharray=\"3 3\" \n                stroke=\"hsl(var(--border))\" \n                opacity={0.3}\n              />\n              <XAxis \n                dataKey=\"month\" \n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n              />\n              <YAxis \n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n              />\n              <Tooltip \n                contentStyle={{\n                  backgroundColor: \"hsl(var(--card))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"6px\",\n                  color: \"hsl(var(--card-foreground))\"\n                }}\n              />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"totalLeads\"\n                stroke=\"hsl(var(--primary))\"\n                strokeWidth={2}\n                dot={{ fill: \"hsl(var(--primary))\", strokeWidth: 2, r: 4 }}\n                name=\"Total Leads\"\n                data-testid=\"line-total-leads\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"contacted\"\n                stroke=\"hsl(24, 74%, 58%)\"\n                strokeWidth={2}\n                dot={{ fill: \"hsl(24, 74%, 58%)\", strokeWidth: 2, r: 4 }}\n                name=\"Contacted\"\n                data-testid=\"line-contacted\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"meetingsBooked\"\n                stroke=\"hsl(142, 76%, 36%)\"\n                strokeWidth={2}\n                dot={{ fill: \"hsl(142, 76%, 36%)\", strokeWidth: 2, r: 4 }}\n                name=\"Meetings Booked\"\n                data-testid=\"line-meetings-booked\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3461},"client/src/components/dashboard/recent-activities.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { UserPlus, Phone, Calendar, AlertTriangle, Handshake } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { EnrichedActivity } from \"@shared/schema\";\n\nexport function RecentActivities() {\n  const { data: activities, isLoading } = useQuery<EnrichedActivity[]>({\n    queryKey: [\"/api/dashboard/activities\"],\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"lead_added\":\n        return UserPlus;\n      case \"call\":\n        return Phone;\n      case \"meeting\":\n        return Calendar;\n      case \"deal_closed\":\n        return Handshake;\n      default:\n        return AlertTriangle;\n    }\n  };\n\n  const getActivityColor = (status: string, type: string) => {\n    if (status === \"failed\") return \"bg-red-50 text-red-600 dark:bg-red-900/20 dark:text-red-400\";\n    \n    switch (type) {\n      case \"lead_added\":\n        return \"bg-emerald-50 text-emerald-600 dark:bg-emerald-900/20 dark:text-emerald-400\";\n      case \"call\":\n        return \"bg-blue-50 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"meeting\":\n        return \"bg-amber-50 text-amber-600 dark:bg-amber-900/20 dark:text-amber-400\";\n      case \"deal_closed\":\n        return \"bg-emerald-50 text-emerald-600 dark:bg-emerald-900/20 dark:text-emerald-400\";\n      default:\n        return \"bg-red-50 text-red-600 dark:bg-red-900/20 dark:text-red-400\";\n    }\n  };\n\n  const getBadgeVariant = (category: string) => {\n    switch (category) {\n      case \"Lead Generation\":\n        return \"default\";\n      case \"Outreach\":\n        return \"secondary\";\n      case \"Meeting\":\n        return \"outline\";\n      case \"Conversion\":\n        return \"default\";\n      case \"Error\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700\" data-testid=\"recent-activities-loading\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-slate-900 dark:text-white\">\n            Recent Activities\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-4 animate-pulse\">\n                <div className=\"w-8 h-8 bg-slate-200 dark:bg-slate-700 rounded-full flex-shrink-0 mt-0.5\" />\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-3/4 mb-2\" />\n                  <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/4\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700\" data-testid=\"recent-activities\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-slate-900 dark:text-white\" data-testid=\"activities-title\">\n            Recent Activities\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/80\" data-testid=\"view-all-activities\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities?.map((activity, index) => {\n            const Icon = getActivityIcon(activity.type);\n            const iconColorClass = getActivityColor(activity.status!, activity.type);\n            \n            return (\n              <div key={activity.id} className=\"flex items-start space-x-4\" data-testid={`activity-item-${index}`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5 ${iconColorClass}`} data-testid={`activity-icon-${index}`}>\n                  <Icon className=\"h-4 w-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-slate-900 dark:text-white\" data-testid={`activity-description-${index}`}>\n                    {activity.description}\n                  </p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\" data-testid={`activity-time-${index}`}>\n                    {activity.timeAgo}\n                  </p>\n                </div>\n                <Badge \n                  variant={getBadgeVariant(activity.category)}\n                  className=\"text-xs\"\n                  data-testid={`activity-category-${index}`}\n                >\n                  {activity.category}\n                </Badge>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4994},"client/src/components/dashboard/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  BarChart3,\n  Users,\n  Filter,\n  Calendar,\n  Mail,\n  Brain,\n  Settings,\n  User,\n  Bot,\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Analytics Overview\", href: \"/\", icon: BarChart3 },\n  { name: \"Lead Insights\", href: \"/leads\", icon: Users },\n  { name: \"Pipeline Stages\", href: \"/pipeline\", icon: Filter },\n  { name: \"Meetings View\", href: \"/meetings\", icon: Calendar },\n  { name: \"Nurture Campaigns\", href: \"/campaigns\", icon: Mail },\n  { name: \"AI Assistant\", href: \"/assistant\", icon: Brain },\n  { name: \"Automation Control Center\", href: \"/automation\", icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"hidden lg:flex lg:flex-shrink-0\">\n      <div className=\"flex flex-col w-64\">\n        <div className=\"flex flex-col flex-1 min-h-0 bg-white dark:bg-slate-800 border-r border-slate-200 dark:border-slate-700\">\n          <div className=\"flex-1 flex flex-col pt-5 pb-4 overflow-y-auto\">\n            {/* Logo */}\n            <div\n              className=\"flex items-center flex-shrink-0 px-4 mb-8\"\n              data-testid=\"sidebar-logo\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <Bot className=\"text-white h-4 w-4\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-bold text-slate-900 dark:text-white\">\n                    AI Dashboard\n                  </h1>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                    Sales Automation\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Navigation */}\n            <nav\n              className=\"flex-1 px-2 space-y-1\"\n              data-testid=\"sidebar-navigation\"\n            >\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.href;\n\n                return (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={cn(\n                      \"group flex items-center px-2 py-2 text-sm font-medium rounded-l-md transition-colors duration-200\",\n                      isActive\n                        ? \"bg-primary/10 text-primary border-r-2 border-primary\"\n                        : \"text-slate-600 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700 rounded-md\",\n                    )}\n                    data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    <Icon className=\"mr-3 h-4 w-4\" />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n\n          {/* User Profile */}\n          <div\n            className=\"flex-shrink-0 flex border-t border-slate-200 dark:border-slate-700 p-4\"\n            data-testid=\"sidebar-user-profile\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"h-8 w-8 rounded-full bg-slate-300 dark:bg-slate-600 flex items-center justify-center\">\n                  <User className=\"text-slate-600 dark:text-slate-300 h-4 w-4\" />\n                </div>\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-slate-700 dark:text-slate-200\">\n                  Business Admin\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3763},"client/src/components/dashboard/system-stats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Phone, CalendarPlus, Percent } from \"lucide-react\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\ninterface SystemStatsProps {\n  metrics: DashboardMetrics;\n}\n\nexport function SystemStats({ metrics }: SystemStatsProps) {\n  const stats = [\n    {\n      title: \"Calls Completed Today\",\n      subtitle: \"AI outreach calls\",\n      value: metrics.callsToday,\n      icon: Phone,\n      color: \"primary\",\n    },\n    {\n      title: \"Meetings Scheduled\",\n      subtitle: \"Today's bookings\",\n      value: metrics.meetingsScheduled,\n      icon: CalendarPlus,\n      color: \"accent\",\n    },\n    {\n      title: \"Show Rate\",\n      subtitle: \"Attended / Booked\",\n      value: metrics.showRate,\n      icon: Percent,\n      color: \"warning\",\n    },\n  ];\n\n  const colorClasses = {\n    primary: \"bg-primary/10 text-primary\",\n    accent: \"bg-emerald-50 text-emerald-600 dark:bg-emerald-900/20 dark:text-emerald-400\",\n    warning: \"bg-amber-50 text-amber-600 dark:bg-amber-900/20 dark:text-amber-400\",\n  };\n\n  // Parse show rate percentage for progress bar\n  const showRateValue = parseFloat(metrics.showRate.replace('%', ''));\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700\" data-testid=\"system-stats\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-slate-900 dark:text-white\" data-testid=\"stats-title\">\n          Key System Stats\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <div key={stat.title} className=\"flex items-center justify-between\" data-testid={`stat-item-${index}`}>\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${colorClasses[stat.color]}`} data-testid={`stat-icon-${index}`}>\n                  <Icon className=\"h-4 w-4\" />\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-slate-900 dark:text-white\" data-testid={`stat-title-${index}`}>\n                    {stat.title}\n                  </p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\" data-testid={`stat-subtitle-${index}`}>\n                    {stat.subtitle}\n                  </p>\n                </div>\n              </div>\n              <p className=\"text-lg font-bold text-slate-900 dark:text-white\" data-testid={`stat-value-${index}`}>\n                {stat.value}\n              </p>\n            </div>\n          );\n        })}\n        \n        {/* Progress Bar for Show Rate */}\n        <div className=\"pt-2\" data-testid=\"show-rate-progress\">\n          <div className=\"flex items-center justify-between text-xs text-slate-600 dark:text-slate-400 mb-1\">\n            <span>This Month's Performance</span>\n            <span data-testid=\"show-rate-percentage\">{metrics.showRate}</span>\n          </div>\n          <Progress \n            value={showRateValue} \n            className=\"h-2\"\n            data-testid=\"show-rate-progress-bar\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3310},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import { forwardRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = \"Avatar\";\n\nconst AvatarImage = forwardRef<\n  HTMLImageElement,\n  React.ImgHTMLAttributes<HTMLImageElement>\n>(({ className, ...props }, ref) => (\n  <img\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = \"AvatarImage\";\n\nconst AvatarFallback = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = \"AvatarFallback\";\n\nexport { Avatar, AvatarImage, AvatarFallback };","size_bytes":1055},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import { forwardRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    orientation?: \"horizontal\" | \"vertical\";\n    decorative?: boolean;\n  }\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <div\n      ref={ref}\n      role={decorative ? \"none\" : \"separator\"}\n      aria-orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\nSeparator.displayName = \"Separator\";\n\nexport { Separator };","size_bytes":690},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n  toggleTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"dashboard-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1634},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}